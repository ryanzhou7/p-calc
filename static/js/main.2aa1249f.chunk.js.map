{"version":3,"sources":["utils/DOM.js","components/ImageInput/ImageInput.js","components/ImageAligner/ImageAligner.js","utils/ImageAnalysis.js","components/ImageAnalyzer/ImageAnalyzer.js","utils/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["event","setDomImage","a","target","files","item","imageSource","URL","createObjectURL","image","Image","src","onload","inputStyle","width","ImageInput","props","setImage","Form","File","type","accept","label","style","custom","onChange","e","handleImageInputChange","ImageAligner","hexToRgb","h","r","g","b","length","getIndex","x","y","ImageAnalyzer","canvasDimensions","resetImage","useState","detectionThreshold","setDetectionThreshold","numPixelsColored","setNumPixelsColored","canvasContext","detectedPixels","setDetectedPixels","recolorHex","setRecolorHex","recolorCanvas","srcImage","ctx","newColorHex","targetColorHex","redRecolor","greenRecolor","blueRecolor","height","imageData","getImageData","originalPixels","data","slice","redIndex","greenIndex","blueIndex","redValue","greenValue","blueValue","Number","push","detect","putImageData","recolorCanvasArea","numPixelsColor","maxY","Math","max","coordinate","i","colorArea","numPixels","Label","Control","className","value","setter","handleColorInputChange","min","Button","onClick","preventDefault","drawRotated","context","canvas","degrees","clearRect","save","translate","rotate","degreesToRadians","window","innerWidth","drawImage","restore","windowWidth","proportionalHeight","clear","App","setCanvasContext","rotationDegrees","axisCoordinates","setCanvasDimensions","canvasRef","useRef","loadImageToCanvas","current","dimensions","useEffect","getContext","yOffset","canvasWidth","originY","beginPath","moveTo","lineTo","strokeStyle","stroke","drawAxis","ref","Accordion","defaultActiveKey","Card","Header","Toggle","as","variant","eventKey","Collapse","Body","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2aa1249f.chunk.js","sourcesContent":["async function handleImageInputChange(event, setDomImage) {\n  if (event.target.files && event.target.files.item(0)) {\n    const imageSource = URL.createObjectURL(event.target.files[0]);\n    const image = new Image();\n    image.src = imageSource;\n    image.onload = () => {\n      setDomImage(image);\n    };\n  }\n}\n\nfunction handleColorInputChange(e, setter) {\n  const { value } = e.target;\n  setter(value);\n}\n\nexport { handleImageInputChange, handleColorInputChange };\n","import React from \"react\";\nimport { handleImageInputChange } from \"../../utils/DOM\";\nimport { FormControl, Form, Button } from \"react-bootstrap\";\n\nfunction ImageInput(props) {\n  const { setImage } = props;\n  return (\n    <div>\n      <Form.File\n        type=\"file\"\n        accept=\"image/*\"\n        label=\"Custom file input\"\n        style={inputStyle}\n        custom\n        onChange={(e) => handleImageInputChange(e, setImage)}\n      />\n    </div>\n  );\n}\n\nconst inputStyle = {\n  width: \"300px\",\n};\n\nexport default ImageInput;\n","import React from \"react\";\nimport \"./index.css\";\nimport { incrementBy, incrementOrginCoordinates } from \"./utils\";\nimport { Button } from \"react-bootstrap\";\n\nfunction ImageAligner(props) {\n  const [rotationDegrees, setRotationDegrees] = props.rotationDegrees;\n  const [axisCoordinates, setAxisCoordinates] = props.axisCoordinates;\n  return (\n    <div>\n      <div>\n        <div>Axis offset Y:{axisCoordinates.y}</div>\n        <div>Move Vertical</div>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) =>\n            incrementOrginCoordinates(e, 0, -1, setAxisCoordinates)\n          }\n        >\n          Move up\n        </Button>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) =>\n            incrementOrginCoordinates(e, 0, 1, setAxisCoordinates)\n          }\n        >\n          Move down\n        </Button>\n      </div>\n\n      <div>\n        <div>Degrees of rotation: {rotationDegrees}</div>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) => incrementBy(e, setRotationDegrees, -1)}\n        >\n          Rotate left\n        </Button>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) => incrementBy(e, setRotationDegrees, 1)}\n        >\n          Rotate right\n        </Button>\n      </div>\n    </div>\n  );\n}\nexport default ImageAligner;\n","function isSameColor(r1, g1, b1, colorHex2, threshold) {\n  // TODO this calculation not working well\n  //const [r2, g2, b2] = hexToRgb(colorHex2);\n  //return Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2) < threshold;\n  return r1 * 2 - (g1 + b1) > threshold;\n}\n\nconst R_OFFSET = 0;\nconst G_OFFSET = 1;\nconst B_OFFSET = 2;\n\nfunction detect(\n  srcImage,\n  ctx,\n  detectionThreshold,\n  newColorHex,\n  targetColorHex\n) {\n  const [redRecolor, greenRecolor, blueRecolor] = hexToRgb(newColorHex);\n  const detectedPixels = [];\n\n  const { width, height } = srcImage;\n  const imageData = ctx.getImageData(0, 0, width, height);\n  const originalPixels = imageData.data.slice();\n\n  // For every pixel of the src image\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const redIndex = getIndex(x, y, width) + R_OFFSET;\n      const greenIndex = getIndex(x, y, width) + G_OFFSET;\n      const blueIndex = getIndex(x, y, width) + B_OFFSET;\n\n      const redValue = originalPixels[redIndex];\n      const greenValue = originalPixels[greenIndex];\n      const blueValue = originalPixels[blueIndex];\n\n      if (\n        isSameColor(\n          redValue,\n          greenValue,\n          blueValue,\n          targetColorHex,\n          detectionThreshold\n        )\n      ) {\n        imageData.data[redIndex] = Number(redRecolor);\n        imageData.data[greenIndex] = Number(greenRecolor);\n        imageData.data[blueIndex] = Number(blueRecolor);\n        detectedPixels.push({ x: x, y: y });\n      }\n    }\n  }\n\n  return [imageData, detectedPixels];\n}\n\nfunction colorArea(srcImage, ctx, newColorHex, detectedPixels) {\n  const [redRecolor, greenRecolor, blueRecolor] = hexToRgb(newColorHex);\n  const { width, height } = srcImage;\n  const imageData = ctx.getImageData(0, 0, width, height);\n  let numPixelsColor = 0;\n\n  let maxY = 0;\n  for (let coordinate of detectedPixels) {\n    const { y } = coordinate;\n    maxY = Math.max(y, maxY);\n  }\n\n  for (let coordinate of detectedPixels) {\n    const { x, y } = coordinate;\n    for (let i = y; i < maxY; i++) {\n      const redIndex = getIndex(x, i, width) + R_OFFSET;\n      const greenIndex = getIndex(x, i, width) + G_OFFSET;\n      const blueIndex = getIndex(x, i, width) + B_OFFSET;\n      imageData.data[redIndex] = redRecolor;\n      imageData.data[greenIndex] = greenRecolor;\n      imageData.data[blueIndex] = blueRecolor;\n      numPixelsColor++;\n    }\n  }\n\n  return [imageData, numPixelsColor];\n}\n\nfunction hexToRgb(h) {\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  // 3 digits\n  if (h.length == 4) {\n    r = \"0x\" + h[1] + h[1];\n    g = \"0x\" + h[2] + h[2];\n    b = \"0x\" + h[3] + h[3];\n\n    // 6 digits\n  } else if (h.length == 7) {\n    r = \"0x\" + h[1] + h[2];\n    g = \"0x\" + h[3] + h[4];\n    b = \"0x\" + h[5] + h[6];\n  }\n  return [r, g, b];\n}\n\nfunction getIndex(x, y, width) {\n  return (x + y * width) * 4;\n}\n\nexport { detect, colorArea };\n","import React, { useState } from \"react\";\nimport { handleColorInputChange } from \"../../utils/DOM\";\nimport { detect, colorArea } from \"../../utils/ImageAnalysis\";\nimport { Button, Form } from \"react-bootstrap\";\n\nfunction ImageAnalyzer(props) {\n  const { canvasDimensions } = props;\n  const { resetImage } = props;\n  const { image } = props;\n  const [detectionThreshold, setDetectionThreshold] = useState(0);\n  const [numPixelsColored, setNumPixelsColored] = useState(0);\n  const [canvasContext, setCanvasContext] = props.canvasContext;\n  const [detectedPixels, setDetectedPixels] = useState([]);\n  const [recolorHex, setRecolorHex] = useState(\"#0000FF\");\n  const [targetColorHex, setTargetColorHex] = useState(\"#FF0000\");\n\n  const handleTargetColorChange = (e) => {\n    e.preventDefault();\n    const { value: newColor } = e.target;\n    setTargetColorHex(newColor);\n  };\n\n  const recolorCanvas = () => {\n    const [imageData, detectedPixels] = detect(\n      image,\n      canvasContext,\n      detectionThreshold,\n      recolorHex,\n      targetColorHex\n    );\n    canvasContext.putImageData(\n      imageData,\n      0,\n      0,\n      0,\n      0,\n      canvasDimensions.width,\n      canvasDimensions.height\n    );\n    setDetectedPixels(detectedPixels);\n  };\n\n  const recolorCanvasArea = () => {\n    const [imageData, numPixels] = colorArea(\n      image,\n      canvasContext,\n      recolorHex,\n      detectedPixels\n    );\n    setNumPixelsColored(numPixels);\n    canvasContext.putImageData(\n      imageData,\n      0,\n      0,\n      0,\n      0,\n      canvasDimensions.width,\n      canvasDimensions.height\n    );\n  };\n\n  return (\n    <div>\n      <div>\n        {/* <Form.Label>Target detection Color:</Form.Label>\n        <Form.Control\n          className=\"mx-auto\"\n          style={inputStyle}\n          type=\"color\"\n          value={targetColorHex}\n          onChange={(e) => handleTargetColorChange(e)}\n        /> */}\n\n        <Form.Label>Recolor:</Form.Label>\n        <Form.Control\n          className=\"mx-auto\"\n          style={inputStyle}\n          type=\"color\"\n          value={recolorHex}\n          onChange={(e) => handleColorInputChange(e, setRecolorHex)}\n        />\n      </div>\n      <div>\n        <Form.Label>Sensitivity</Form.Label>\n        <Form.Control\n          className=\"mx-auto\"\n          style={inputStyle}\n          type=\"range\"\n          min=\"0\"\n          max=\"255\"\n          value={detectionThreshold}\n          onChange={(e) => setDetectionThreshold(e.target.value)}\n        />\n      </div>\n      <div className=\"m-2\">\n        <Button className=\"mx-1\" onClick={(e) => recolorCanvas(e)}>\n          Analyze\n        </Button>\n        <Button className=\"mx-1\" onClick={(e) => recolorCanvasArea(e)}>\n          Color area\n        </Button>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) => {\n            e.preventDefault();\n            resetImage();\n          }}\n        >\n          Reset analysis\n        </Button>\n      </div>\n      <div>\n        <div>Pixel count: {numPixelsColored}</div>\n      </div>\n    </div>\n  );\n}\n\nconst inputStyle = {\n  width: \"200px\",\n};\n\nexport default ImageAnalyzer;\n","const WIDTH_PADDING = 50;\n\nasync function drawRotated(context, canvas, degrees, image) {\n  if (canvas == null || image == null || context == null) {\n    return;\n  }\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.save();\n  context.translate(canvas.width / 2, canvas.height / 2);\n  context.rotate(degreesToRadians(degrees));\n\n  const width = window.innerWidth - WIDTH_PADDING;\n  const height = (image.height / width) * width;\n  context.drawImage(image, -width / 2, -height / 2);\n  context.restore();\n}\n\nfunction drawAxis(context, canvas, axisCoordinates, image) {\n  if (canvas == null || image == null) {\n    return;\n  }\n  const { x: xOffset, y: yOffset } = axisCoordinates;\n  const { width: canvasWidth, height: canvasHeight } = canvas;\n  const originX = 0;\n  const originY = canvasHeight / 2 + yOffset;\n  context.beginPath();\n  context.moveTo(originX, originY + yOffset);\n  context.lineTo(originX + canvasWidth, originY + yOffset);\n  context.strokeStyle = \"#FF0000\";\n  context.stroke();\n}\n\nfunction drawImage(context, canvas, image) {\n  if (canvas == null || image == null) {\n    return;\n  }\n\n  let windowWidth = window.innerWidth - WIDTH_PADDING;\n  const { width, height } = image;\n\n  // Don't let width exceed this size on desktop\n  windowWidth = Math.min(windowWidth, 1000);\n  const proportionalHeight = (height / width) * windowWidth;\n\n  // TODO for it to work on desktop just use canvas.width = width and height\n  //canvas.width = width;\n  //canvas.height = height;\n  canvas.width = windowWidth;\n  canvas.height = proportionalHeight;\n  context.drawImage(image, 0, 0, windowWidth, proportionalHeight);\n\n  return { width: windowWidth, height: proportionalHeight };\n}\n\nfunction degreesToRadians(degrees) {\n  return degrees * 0.01745;\n}\n\nfunction clear(context, canvas) {\n  if (canvas == null || context == null) {\n    return;\n  }\n  context.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nexport { drawRotated, drawAxis, drawImage, clear };\n","import React, { useState, useRef, useEffect } from \"react\";\nimport ImageInput from \"./components/ImageInput/ImageInput\";\nimport ImageAligner from \"./components/ImageAligner/ImageAligner\";\nimport ImageAnalyzer from \"./components/ImageAnalyzer/ImageAnalyzer\";\nimport { Button, Card, Accordion } from \"react-bootstrap\";\nimport { drawRotated, drawAxis, drawImage, clear } from \"./utils/Canvas\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [image, setImage] = useState(null);\n  const [canvasContext, setCanvasContext] = useState(null);\n  const [rotationDegrees, setRotationDegrees] = useState(0);\n  const [axisCoordinates, setAxisCoordinates] = useState({ x: 0, y: 0 });\n  const [canvasDimensions, setCanvasDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    const context = canvas.getContext(\"2d\");\n    setCanvasContext(context);\n  }, []);\n\n  useEffect(() => {\n    loadImageToCanvas();\n  }, [image]);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    clear(canvasContext, canvas);\n    drawRotated(canvasContext, canvas, rotationDegrees, image);\n  }, [rotationDegrees]);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    clear(canvasContext, canvas);\n    drawRotated(canvasContext, canvas, rotationDegrees, image);\n    drawAxis(canvasContext, canvasRef.current, axisCoordinates, image);\n  }, [axisCoordinates]);\n\n  async function loadImageToCanvas() {\n    const { current: canvas } = canvasRef;\n    clear(canvasContext, canvas);\n    const dimensions = drawImage(canvasContext, canvas, image);\n    setCanvasDimensions(dimensions);\n  }\n\n  return (\n    <div className=\"App\">\n      <h4>Welcome to G-calc</h4>\n      <div>\n        <canvas ref={canvasRef} className=\"preview-canvas\" />\n      </div>\n      <div>\n        <Accordion defaultActiveKey=\"0\">\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                1. Image input\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                <ImageInput setImage={setImage} />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                2. Image analysis\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <ImageAnalyzer\n                  image={image}\n                  canvasContext={[canvasContext, setCanvasContext]}\n                  resetImage={loadImageToCanvas}\n                  canvasDimensions={canvasDimensions}\n                />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}