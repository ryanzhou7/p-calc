{"version":3,"sources":["utils/DOM.js","components/ImageInput/ImageInput.js","components/ImageAligner/utils.js","components/ImageAligner/ImageAligner.js","utils/ImageAnalysis.js","components/ImageAnalyzer/ImageAnalyzer.js","utils/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["event","setDomImage","a","target","files","item","imageSource","URL","createObjectURL","image","Image","src","onload","inputStyle","width","ImageInput","props","setImage","Form","File","type","accept","label","style","custom","onChange","e","handleImageInputChange","incrementBy","stateSetter","value","preventDefault","previous","incrementOrginCoordinates","xIncrement","yIncrement","x","y","ImageAligner","rotationDegrees","setRotationDegrees","axisCoordinates","setAxisCoordinates","Button","className","onClick","isSameColor","r1","g1","b1","colorHex2","threshold","hexToRgb","r2","g2","b2","Math","abs","h","r","g","b","length","getIndex","ImageAnalyzer","xAxisYPoint","useState","detectionThreshold","setDetectionThreshold","numPixelsColored","setNumPixelsColored","canvasContext","detectedPixels","setDetectedPixels","recolorHex","setRecolorHex","targetColorHex","setTargetColorHex","recolorCanvas","srcImage","ctx","newColorHex","redRecolor","greenRecolor","blueRecolor","height","imageData","getImageData","originalPixels","data","slice","redIndex","greenIndex","blueIndex","Number","push","detect","putImageData","recolorCanvasArea","numPixelsColor","maxY","max","coordinate","i","colorArea","numPixels","Label","Control","newColor","handleTargetColorChange","setter","handleColorInputChange","min","drawRotated","context","canvas","degrees","clearRect","save","translate","rotate","degreesToRadians","window","innerWidth","drawImage","restore","clear","App","setCanvasContext","canvasRef","useRef","useEffect","current","getContext","windowWidth","proportionalHeight","yOffset","canvasWidth","originY","beginPath","moveTo","lineTo","strokeStyle","stroke","drawAxis","ref","Accordion","defaultActiveKey","Card","Header","Toggle","as","variant","eventKey","Collapse","Body","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba03c760.chunk.js","sourcesContent":["async function handleImageInputChange(event, setDomImage) {\n  if (event.target.files && event.target.files.item(0)) {\n    const imageSource = URL.createObjectURL(event.target.files[0]);\n    const image = new Image();\n    image.src = imageSource;\n    image.onload = () => {\n      setDomImage(image);\n    };\n  }\n}\n\nfunction handleColorInputChange(e, setter) {\n  const { value } = e.target;\n  setter(value);\n}\n\nexport { handleImageInputChange, handleColorInputChange };\n","import React from \"react\";\nimport { handleImageInputChange } from \"../../utils/DOM\";\nimport { FormControl, Form, Button } from \"react-bootstrap\";\n\nfunction ImageInput(props) {\n  const { setImage } = props;\n  return (\n    <div>\n      <Form.File\n        type=\"file\"\n        accept=\"image/*\"\n        label=\"Custom file input\"\n        style={inputStyle}\n        custom\n        onChange={(e) => handleImageInputChange(e, setImage)}\n      />\n    </div>\n  );\n}\n\nconst inputStyle = {\n  width: \"300px\",\n};\n\nexport default ImageInput;\n","function incrementBy(e, stateSetter, value) {\n  e.preventDefault();\n  stateSetter((previous) => previous + value);\n}\n\nfunction incrementOrginCoordinates(e, xIncrement, yIncrement, stateSetter) {\n  e.preventDefault();\n  stateSetter(({ x, y }) => {\n    return { x: x + xIncrement, y: y + yIncrement };\n  });\n}\n\nexport { incrementBy, incrementOrginCoordinates };\n","import React from \"react\";\nimport \"./index.css\";\nimport { incrementBy, incrementOrginCoordinates } from \"./utils\";\nimport { Button } from \"react-bootstrap\";\n\nfunction ImageAligner(props) {\n  const [rotationDegrees, setRotationDegrees] = props.rotationDegrees;\n  const [axisCoordinates, setAxisCoordinates] = props.axisCoordinates;\n  return (\n    <div>\n      <div>\n        <div>Axis offset Y:{axisCoordinates.y}</div>\n        <div>Move Vertical</div>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) =>\n            incrementOrginCoordinates(e, 0, -1, setAxisCoordinates)\n          }\n        >\n          Move up\n        </Button>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) =>\n            incrementOrginCoordinates(e, 0, 1, setAxisCoordinates)\n          }\n        >\n          Move down\n        </Button>\n      </div>\n\n      <div>\n        <div>Degrees of rotation: {rotationDegrees}</div>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) => incrementBy(e, setRotationDegrees, -1)}\n        >\n          Rotate left\n        </Button>\n        <Button\n          className=\"mx-1\"\n          onClick={(e) => incrementBy(e, setRotationDegrees, 1)}\n        >\n          Rotate right\n        </Button>\n      </div>\n    </div>\n  );\n}\nexport default ImageAligner;\n","function isSameColor(r1, g1, b1, colorHex2, threshold) {\n  const [r2, g2, b2] = hexToRgb(colorHex2);\n  return Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2) < threshold;\n}\n\nconst R_OFFSET = 0;\nconst G_OFFSET = 1;\nconst B_OFFSET = 2;\n\nfunction detect(\n  srcImage,\n  ctx,\n  detectionThreshold,\n  newColorHex,\n  targetColorHex\n) {\n  const [redRecolor, greenRecolor, blueRecolor] = hexToRgb(newColorHex);\n  const detectedPixels = [];\n\n  const { width, height } = srcImage;\n  const imageData = ctx.getImageData(0, 0, width, height);\n  const originalPixels = imageData.data.slice();\n\n  // For every pixel of the src image\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const redIndex = getIndex(x, y, width) + R_OFFSET;\n      const greenIndex = getIndex(x, y, width) + G_OFFSET;\n      const blueIndex = getIndex(x, y, width) + B_OFFSET;\n\n      const redValue = originalPixels[redIndex];\n      const greenValue = originalPixels[greenIndex];\n      const blueValue = originalPixels[blueIndex];\n\n      if (\n        isSameColor(\n          redValue,\n          greenValue,\n          blueValue,\n          targetColorHex,\n          detectionThreshold\n        )\n      ) {\n        imageData.data[redIndex] = Number(redRecolor);\n        imageData.data[greenIndex] = Number(greenRecolor);\n        imageData.data[blueIndex] = Number(blueRecolor);\n        detectedPixels.push({ x: x, y: y });\n      }\n    }\n  }\n\n  return [imageData, detectedPixels];\n}\n\nfunction colorArea(srcImage, ctx, newColorHex, detectedPixels, xAxisYPoint) {\n  const [redRecolor, greenRecolor, blueRecolor] = hexToRgb(newColorHex);\n  const { width, height } = srcImage;\n  const imageData = ctx.getImageData(0, 0, width, height);\n  let numPixelsColor = 0;\n\n  let maxY = 0;\n  for (let coordinate of detectedPixels) {\n    const { y } = coordinate;\n    maxY = Math.max(y, maxY);\n  }\n\n  for (let coordinate of detectedPixels) {\n    const { x, y } = coordinate;\n    for (let i = y; i < maxY + xAxisYPoint; i++) {\n      const redIndex = getIndex(x, i, width) + R_OFFSET;\n      const greenIndex = getIndex(x, i, width) + G_OFFSET;\n      const blueIndex = getIndex(x, i, width) + B_OFFSET;\n      imageData.data[redIndex] = redRecolor;\n      imageData.data[greenIndex] = greenRecolor;\n      imageData.data[blueIndex] = blueRecolor;\n      numPixelsColor++;\n    }\n  }\n\n  return [imageData, numPixelsColor];\n}\n\nconst rgbToHex = (r, g, b) =>\n  \"#\" +\n  [r, g, b]\n    .map((x) => {\n      const hex = x.toString(16);\n      return hex.length === 1 ? \"0\" + hex : hex;\n    })\n    .join(\"\");\n\nfunction hexToRgb(h) {\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  // 3 digits\n  if (h.length == 4) {\n    r = \"0x\" + h[1] + h[1];\n    g = \"0x\" + h[2] + h[2];\n    b = \"0x\" + h[3] + h[3];\n\n    // 6 digits\n  } else if (h.length == 7) {\n    r = \"0x\" + h[1] + h[2];\n    g = \"0x\" + h[3] + h[4];\n    b = \"0x\" + h[5] + h[6];\n  }\n  return [r, g, b];\n}\n\nfunction getIndex(x, y, width) {\n  return (x + y * width) * 4;\n}\n\nexport { detect, colorArea };\n","import React, { useState } from \"react\";\nimport { handleColorInputChange } from \"../../utils/DOM\";\nimport { detect, colorArea } from \"../../utils/ImageAnalysis\";\nimport { Button, Form } from \"react-bootstrap\";\n\nfunction ImageAnalyzer(props) {\n  const { image } = props;\n  const { xAxisYPoint } = props;\n  const [detectionThreshold, setDetectionThreshold] = useState(0);\n  const [numPixelsColored, setNumPixelsColored] = useState(0);\n  const [canvasContext, setCanvasContext] = props.canvasContext;\n  const [detectedPixels, setDetectedPixels] = useState([]);\n  const [recolorHex, setRecolorHex] = useState(\"#0000FF\");\n  const [targetColorHex, setTargetColorHex] = useState(\"#FF0000\");\n\n  const handleTargetColorChange = (e) => {\n    e.preventDefault();\n    const { value: newColor } = e.target;\n    setTargetColorHex(newColor);\n  };\n\n  const recolorCanvas = () => {\n    const [imageData, detectedPixels] = detect(\n      image,\n      canvasContext,\n      detectionThreshold,\n      recolorHex,\n      targetColorHex\n    );\n    canvasContext.putImageData(imageData, 0, 0);\n    setDetectedPixels(detectedPixels);\n  };\n\n  const recolorCanvasArea = () => {\n    const [imageData, numPixels] = colorArea(\n      image,\n      canvasContext,\n      recolorHex,\n      detectedPixels,\n      xAxisYPoint\n    );\n    setNumPixelsColored(numPixels);\n    canvasContext.putImageData(imageData, 0, 0);\n  };\n\n  return (\n    <div>\n      <div>\n        <Form.Label>Target detection Color:</Form.Label>\n        <Form.Control\n          className=\"mx-auto\"\n          style={inputStyle}\n          type=\"color\"\n          value={targetColorHex}\n          onChange={(e) => handleTargetColorChange(e)}\n        />\n\n        <Form.Label>Recolor:</Form.Label>\n        <Form.Control\n          className=\"mx-auto\"\n          style={inputStyle}\n          type=\"color\"\n          value={recolorHex}\n          onChange={(e) => handleColorInputChange(e, setRecolorHex)}\n        />\n      </div>\n      <div>\n        <Form.Label>Sensitivity</Form.Label>\n        <Form.Control\n          className=\"mx-auto\"\n          style={inputStyle}\n          type=\"range\"\n          min=\"0\"\n          max=\"255\"\n          value={detectionThreshold}\n          onChange={(e) => setDetectionThreshold(e.target.value)}\n        />\n      </div>\n      <div className=\"m-2\">\n        <Button className=\"mx-1\" onClick={(e) => recolorCanvas(e)}>\n          Analyze\n        </Button>\n        <Button className=\"mx-1\" onClick={(e) => recolorCanvasArea(e)}>\n          Color area\n        </Button>\n      </div>\n      <div>\n        <div>Pixel count: {numPixelsColored}</div>\n      </div>\n    </div>\n  );\n}\n\nconst inputStyle = {\n  width: \"200px\",\n};\n\nexport default ImageAnalyzer;\n","const WIDTH_PADDING = 10;\n\nfunction drawRotated(context, canvas, degrees, image) {\n  if (canvas == null || image == null || context == null) {\n    return;\n  }\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.save();\n  context.translate(canvas.width / 2, canvas.height / 2);\n  context.rotate(degreesToRadians(degrees));\n\n  const width = window.innerWidth - WIDTH_PADDING;\n  const height = (image.height / width) * width;\n  context.drawImage(image, -width / 2, -height / 2);\n  context.restore();\n}\n\nfunction drawAxis(context, canvas, axisCoordinates, image) {\n  if (canvas == null || image == null) {\n    return;\n  }\n  const { x: xOffset, y: yOffset } = axisCoordinates;\n  const { width: canvasWidth, height: canvasHeight } = canvas;\n  const originX = 0;\n  const originY = canvasHeight / 2 + yOffset;\n  context.beginPath();\n  context.moveTo(originX, originY + yOffset);\n  context.lineTo(originX + canvasWidth, originY + yOffset);\n  context.strokeStyle = \"#FF0000\";\n  context.stroke();\n}\n\nfunction drawImage(context, canvas, image) {\n  if (canvas == null || image == null) {\n    return;\n  }\n\n  const windowWidth = window.innerWidth - WIDTH_PADDING;\n  const { width, height } = image;\n  const proportionalHeight = (height / width) * windowWidth;\n\n  // TODO for it to work on desktop just use canvas.width = width and height\n  canvas.width = windowWidth;\n  canvas.height = proportionalHeight;\n  context.drawImage(image, 0, 0, windowWidth, proportionalHeight);\n}\n\nfunction degreesToRadians(degrees) {\n  return degrees * 0.01745;\n}\n\nfunction clear(context, canvas) {\n  if (canvas == null || context == null) {\n    return;\n  }\n  context.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nexport { drawRotated, drawAxis, drawImage, clear };\n","import React, { useState, useRef, useEffect } from \"react\";\nimport ImageInput from \"./components/ImageInput/ImageInput\";\nimport ImageAligner from \"./components/ImageAligner/ImageAligner\";\nimport ImageAnalyzer from \"./components/ImageAnalyzer/ImageAnalyzer\";\nimport { Button, Card, Accordion } from \"react-bootstrap\";\nimport { drawRotated, drawAxis, drawImage, clear } from \"./utils/Canvas\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [image, setImage] = useState(null);\n  const [canvasContext, setCanvasContext] = useState(null);\n  const [rotationDegrees, setRotationDegrees] = useState(0);\n  const [axisCoordinates, setAxisCoordinates] = useState({ x: 0, y: 0 });\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    const context = canvas.getContext(\"2d\");\n    setCanvasContext(context);\n  }, []);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    clear(canvasContext, canvas);\n    drawImage(canvasContext, canvas, image);\n  }, [image]);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    clear(canvasContext, canvas);\n    drawRotated(canvasContext, canvas, rotationDegrees, image);\n  }, [rotationDegrees]);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    clear(canvasContext, canvas);\n    drawRotated(canvasContext, canvas, rotationDegrees, image);\n    drawAxis(canvasContext, canvasRef.current, axisCoordinates, image);\n  }, [axisCoordinates]);\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to G-calc</h1>\n      <div>\n        <canvas ref={canvasRef} className=\"preview-canvas\" />\n      </div>\n      <div>\n        <Accordion defaultActiveKey=\"0\">\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                1. Image input\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                <ImageInput setImage={setImage} />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                2. Image alignment\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <ImageAligner\n                  rotationDegrees={[rotationDegrees, setRotationDegrees]}\n                  axisCoordinates={[axisCoordinates, setAxisCoordinates]}\n                />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                3. Image analysis\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"2\">\n              <Card.Body>\n                <ImageAnalyzer\n                  image={image}\n                  canvasContext={[canvasContext, setCanvasContext]}\n                  xAxisYPoint={axisCoordinates.y}\n                />\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}