{"version":3,"sources":["assets/target-thick.png","redux/innerCanvasInfoReducer.js","redux/outerCanvasInfoReducer.js","redux/canvasEditReducer.js","components/ColorToggler/ColorToggler.js","models/coordinate.js","models/canvasData.js","utils/ImageAnalysis.js","utils/Canvas.js","components/CanvasEffectButtonGroup/utils.js","components/CanvasEffectButtonGroup/CanvasEffectButtonGroup.js","components/ImageAnalyzer/ImageAnalyzer.js","components/Canvas/Canvas.js","redux/imageReducer.js","redux/combinedCanvasInfoReducer.js","components/AnalysisResults/utils.js","components/AnalysisResults/AnalysisResults.js","pages/Manual/index.js","pages/Auto/index.js","pages/Home/index.js","components/App/index.tsx","serviceWorker.js","redux/canvasSettingsReducer.js","redux/videoReducer.js","redux/index.js","index.js"],"names":["module","exports","setContext","context","type","payload","setDetectedPixels","detectedPixels","setRecolorHex","hex","initialState","recoloredImageData","numColoredPixels","recolorHex","isOuterEdit","ColorToggler","useSelector","state","canvasEdit","dispatch","useDispatch","canvasEditToggler","Button","active","className","variant","onClick","Coordinate","x","y","this","CanvasDataHelper","canvasWidth","imageArray","redIndex","getIndex","greenIndex","blueIndex","r","g","b","pixelAtCoordinate","newColor","Number","width","isRed","threshold","color","Color","rgb","hsl","h","s","l","isBlue","detect","canvasContext","detectionDimensions","isColor","a","detectionWidth","detectionHeight","imageData","getImageData","hexToRgb","canvasData","data","coordinate","rgbPixel","recolor","detectedCoordinate","push","Promise","resolve","colorAreaWithBounds","outerCanvasInfo","innerCanvasInfo","combinedCanvasInfo","height","leftX","rightX","updateImageData","outerNumPixelsColored","innerNumPixelsColored","canvasInfo","getBoundedPixelInfo","numDetectedPixels","existingPixels","isExistingPixel","containsXYKeyIn","getXYKey","i","currentKey","set","Map","key","String","getKey","map","has","red","green","blue","length","setWithImage","image","drawImage","event","canvasHeight","setNumPixelsColored","preventDefault","Canvas","CanvasEffectButtonGroup","props","source","canvasSettings","canvasDimensions","detectionThreshold","currentCanvasInfo","isColorDetector","ImageAnalysis","putImageData","outerCanvasInfoReducer","innerCanvasInfoReducer","recolorDetection","setNumColoredPixels","utils","ImageAnalyzer","useState","setDetectionThreshold","changeDetectionThresholdBy","value","previous","newValue","parseInt","innerRecolorHex","outerRecolorHex","canvasColorOptionsProps","Form","Label","Control","onChange","target","min","max","drawDimensions","drawWidth","drawHeight","setCanvasContext","canvasRef","useRef","useEffect","current","getContext","canvas","ref","setImage","Image","onload","src","setNumColoredInnerPixels","setNumColoredOuterPixels","numColoredOuterPixels","numColoredInnerPixels","outerDetectedPixels","innerDetectedPixels","findLeftCutOff","findRightCutOff","combinedCanvasInfoReducer","smallestOuter","MAX_SAFE_INTEGER","Math","smallestInner","largestOuter","largestInner","AnalysisResults","outerPixels","outerNumColoredPixels","innerNumColoredPixels","canvasProps","toFixed","withOrientationChange","videoConstraints","videoReducer","innerCanvasContext","outerCanvasContext","isPortrait","webcamRef","captureContainerRef","capture","useCallback","screenshot","getScreenshot","imageReducer","outerCanvasProps","setOuterContext","innerCanvasProps","setInnerContext","analysisResultsProps","style","position","float","audio","screenshotFormat","sample","isLandscape","Home","to","activeClassName","path","App","Boolean","window","location","hostname","match","facingMode","exact","imageSmoothing","screenshotQuality","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f833fb75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/target-thick.c9dcc9e1.png\";","export function setContext(context) {\n  return { type: \"SET_INNER_CONTEXT\", payload: context };\n}\nexport function setRecoloredImageData(recoloredImageData) {\n  return {\n    type: \"SET_INNER_RECOLORED_IMAGE_DATA\",\n    payload: recoloredImageData,\n  };\n}\nexport function setDetectedPixels(detectedPixels) {\n  return { type: \"SET_INNER_DETECTED_PIXELS\", payload: detectedPixels };\n}\nexport function setNumColoredPixelsCallback(dispatch) {\n  return (numColoredPixels) => {\n    dispatch(setNumColoredPixels(numColoredPixels));\n  };\n}\n\nexport function setNumColoredPixels(numColoredPixels) {\n  return { type: \"SET_INNER_NUM_COLORED_PIXELS\", payload: numColoredPixels };\n}\n\nexport function setRecolorHex(hex) {\n  return { type: \"SET_INNER_RECOLOR_HEX\", payload: hex };\n}\n\nconst initialState = {\n  context: null,\n  recoloredImageData: null,\n  numColoredPixels: 0,\n  detectedPixels: [],\n  recolorHex: \"#00FF00\",\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_INNER_CONTEXT\":\n      return {\n        ...state,\n        context: action.payload,\n      };\n    case \"SET_INNER_RECOLORED_IMAGE_DATA\":\n      return {\n        ...state,\n        recoloredImageData: action.payload,\n      };\n    case \"SET_INNER_DETECTED_PIXELS\":\n      return {\n        ...state,\n        detectedPixels: action.payload,\n      };\n    case \"SET_INNER_NUM_COLORED_PIXELS\":\n      return {\n        ...state,\n        numColoredPixels: action.payload,\n      };\n\n    case \"SET_INNER_RECOLOR_HEX\":\n      return {\n        ...state,\n        recolorHex: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","export function setContext(context) {\n  return { type: \"SET_OUTER_CONTEXT\", payload: context };\n}\nexport function setRecoloredImageData(recoloredImageData) {\n  return {\n    type: \"SET_OUTER_RECOLORED_IMAGE_DATA\",\n    payload: recoloredImageData,\n  };\n}\nexport function setDetectedPixels(detectedPixels) {\n  return { type: \"SET_OUTER_DETECTED_PIXELS\", payload: detectedPixels };\n}\nexport function setNumColoredPixelsCallback(dispatch) {\n  return (numColoredPixels) => {\n    dispatch(setNumColoredPixels(numColoredPixels));\n  };\n}\n\nexport function setNumColoredPixels(numColoredPixels) {\n  return { type: \"SET_OUTER_NUM_COLORED_PIXELS\", payload: numColoredPixels };\n}\n\nexport function setRecolorHex(hex) {\n  return { type: \"SET_OUTER_RECOLOR_HEX\", payload: hex };\n}\n\nconst initialState = {\n  context: null,\n  recoloredImageData: null,\n  numColoredPixels: 0,\n  detectedPixels: [],\n  recolorHex: \"#FFA500\",\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_OUTER_CONTEXT\":\n      return {\n        ...state,\n        context: action.payload,\n      };\n    case \"SET_OUTER_RECOLORED_IMAGE_DATA\":\n      return {\n        ...state,\n        recoloredImageData: action.payload,\n      };\n    case \"SET_OUTER_DETECTED_PIXELS\":\n      return {\n        ...state,\n        detectedPixels: action.payload,\n      };\n    case \"SET_OUTER_NUM_COLORED_PIXELS\":\n      return {\n        ...state,\n        numColoredPixels: action.payload,\n      };\n\n    case \"SET_OUTER_RECOLOR_HEX\":\n      return {\n        ...state,\n        recolorHex: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","export function toggleIsOuterEdit() {\n  return { type: \"TOGGLE_IS_OUTER_EDIT\" };\n}\n\nconst initialState = {\n  isOuterEdit: true,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"TOGGLE_IS_OUTER_EDIT\":\n      return {\n        ...state,\n        isOuterEdit: !state.isOuterEdit,\n      };\n    default:\n      return state;\n  }\n}\n","import { Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as canvasEditReducer from \"../../redux/canvasEditReducer\";\nimport React from \"react\";\nfunction ColorToggler() {\n  const isOuterEdit = useSelector((state) => state.canvasEdit.isOuterEdit);\n  const dispatch = useDispatch();\n  const canvasEditToggler = () => {\n    dispatch(canvasEditReducer.toggleIsOuterEdit());\n  };\n  return (\n    <div>\n      <div>Currently editing:</div>\n      <Button\n        active={isOuterEdit}\n        className=\"mr-2\"\n        variant=\"outline-danger\"\n        onClick={canvasEditToggler}\n      >\n        Outer\n      </Button>\n      <Button\n        active={!isOuterEdit}\n        variant=\"outline-primary\"\n        onClick={canvasEditToggler}\n      >\n        Inner\n      </Button>\n    </div>\n  );\n}\n\nexport default ColorToggler;\n","export default class Coordinate {\n  constructor({ x, y }) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","/**\n * Offsets access each value in a canvasContext.getImageData()\n */\nconst R_OFFSET = 0;\nconst G_OFFSET = 1;\nconst B_OFFSET = 2;\n\nexport default class CanvasDataHelper {\n  constructor({ canvasWidth, imageArray }) {\n    this.canvasWidth = canvasWidth;\n    this.imageArray = imageArray;\n  }\n\n  rgbPixel({ x, y }) {\n    const redIndex = getIndex(x, y, this.canvasWidth) + R_OFFSET;\n    const greenIndex = getIndex(x, y, this.canvasWidth) + G_OFFSET;\n    const blueIndex = getIndex(x, y, this.canvasWidth) + B_OFFSET;\n\n    const redValue = this.imageArray[redIndex];\n    const greenValue = this.imageArray[greenIndex];\n    const blueValue = this.imageArray[blueIndex];\n    return { r: redValue, g: greenValue, b: blueValue };\n  }\n\n  recolor(pixelAtCoordinate, newColor) {\n    const { r, g, b } = newColor;\n    const { x, y } = pixelAtCoordinate;\n\n    const redIndex = getIndex(x, y, this.canvasWidth) + R_OFFSET;\n    const greenIndex = getIndex(x, y, this.canvasWidth) + G_OFFSET;\n    const blueIndex = getIndex(x, y, this.canvasWidth) + B_OFFSET;\n\n    this.imageArray[redIndex] = Number(r);\n    this.imageArray[greenIndex] = Number(g);\n    this.imageArray[blueIndex] = Number(b);\n  }\n}\n\n/**\n * Get the index in a canvasContext.getImageData() array given the x, y, and width\n * @param {*} x\n * @param {*} y\n * @param {*} width\n */\nfunction getIndex(x, y, width) {\n  return (x + y * width) * 4;\n}\n","import Color from \"color\";\nimport Coordinate from \"../models/coordinate\";\nimport CanvasDataHelper from \"../models/canvasData\";\n\n/**\n * Basic algorithm for red detection\n * @param {*} threshold\n */\nfunction isRed(threshold) {\n  return (color) => {\n    const { r, g, b } = color;\n    const [h, s, l] = Color.rgb(r, g, b).hsl().color;\n    return (\n      (h < threshold || h > 360 - threshold) && s >= 20 && (l >= 20 || l <= 90)\n    );\n  };\n}\n\n/**\n * Basic algorithm for blue detection\n * @param {*} threshold\n */\nfunction isBlue(threshold) {\n  return ({ r, g, b }) => b * 2 - (g + r) > 255 - threshold;\n}\n\n/**\n * Offsets access each value in a canvasContext.getImageData()\n */\nconst R_OFFSET = 0;\nconst G_OFFSET = 1;\nconst B_OFFSET = 2;\n\n/**\n * Detects the color, recolors it, and return the newly recolored image / number of pixels colored\n * @param {*} detectionDimensions\n * @param {*} imageData\n * @param {*} isColor\n * @param {*} recolorHex\n */\nasync function detect(canvasContext, detectionDimensions, isColor, recolorHex) {\n  const { detectionWidth, detectionHeight } = detectionDimensions;\n  const imageData = canvasContext.getImageData(\n    0,\n    0,\n    detectionWidth,\n    detectionHeight\n  );\n\n  const newColor = hexToRgb(recolorHex);\n  const detectedPixels = [];\n\n  const canvasData = new CanvasDataHelper({\n    canvasWidth: detectionWidth,\n    imageArray: imageData.data,\n  });\n\n  // We use detection height / 2 so we only detect for the upper half of the image\n  for (let y = 0; y < detectionHeight / 2; y++) {\n    for (let x = 0; x < detectionWidth; x++) {\n      const coordinate = { x, y };\n\n      const rgbPixel = canvasData.rgbPixel(coordinate);\n\n      if (isColor(rgbPixel)) {\n        canvasData.recolor(coordinate, newColor);\n        const detectedCoordinate = new Coordinate(coordinate);\n        detectedPixels.push(detectedCoordinate);\n      }\n    }\n  }\n\n  return Promise.resolve([imageData, detectedPixels]);\n}\n\nasync function colorAreaWithBounds(\n  { width, height },\n  outerCanvasInfo,\n  innerCanvasInfo,\n  combinedCanvasInfo,\n  { leftX, rightX }\n) {\n  const imageData = combinedCanvasInfo.context.getImageData(\n    0,\n    0,\n    width,\n    height\n  );\n\n  const outerNumPixelsColored = await updateImageData(\n    { width, height },\n    imageData,\n    { leftX, rightX },\n    outerCanvasInfo\n  );\n\n  const innerNumPixelsColored = await updateImageData(\n    { width, height },\n    imageData,\n    { leftX, rightX },\n    innerCanvasInfo\n  );\n\n  return Promise.resolve({\n    imageData,\n    outerNumPixelsColored,\n    innerNumPixelsColored,\n  });\n}\n\nasync function updateImageData(\n  { width, height },\n  imageData,\n  { leftX, rightX },\n  canvasInfo\n) {\n  const newColor = hexToRgb(canvasInfo.recolorHex);\n\n  let {\n    numDetectedPixels,\n    existingPixels,\n  } = getBoundedPixelInfo(canvasInfo.detectedPixels, { leftX, rightX });\n\n  const isExistingPixel = containsXYKeyIn(getXYKey, existingPixels);\n\n  for (let [, coordinate] of existingPixels) {\n    if (coordinate != null) {\n      const { x, y } = coordinate;\n\n      for (let i = y; i < height / 2; i++) {\n        if (!isExistingPixel(x, i)) {\n          const redIndex = getIndex(x, i, width) + R_OFFSET;\n          const greenIndex = getIndex(x, i, width) + G_OFFSET;\n          const blueIndex = getIndex(x, i, width) + B_OFFSET;\n          imageData.data[redIndex] = newColor.r;\n          imageData.data[greenIndex] = newColor.g;\n          imageData.data[blueIndex] = newColor.b;\n\n          const currentKey = getXYKey(x, i);\n          existingPixels.set(currentKey, null);\n          numDetectedPixels++;\n        }\n      }\n    }\n  }\n\n  return numDetectedPixels;\n}\n\nfunction getBoundedPixelInfo(detectedPixels, { leftX, rightX }) {\n  const existingPixels = new Map();\n\n  let numDetectedPixels = 0;\n\n  for (let coordinate of detectedPixels) {\n    const { x, y } = coordinate;\n    if (x >= leftX && x <= rightX) {\n      const key = getXYKey(x, y);\n      existingPixels.set(key, coordinate);\n      numDetectedPixels++;\n    }\n  }\n\n  return {\n    numDetectedPixels,\n    existingPixels,\n  };\n}\n\n/**\n * Get the unique key given the arguments\n * @param {*} x\n * @param {*} y\n */\nfunction getXYKey(x, y) {\n  return String(x) + String(y);\n}\n\n/**\n * Given x,y is the generated key in this map?\n * @param {*} x\n * @param {*} y\n * @param {*} map\n */\nfunction containsXYKeyIn(getKey, map) {\n  return (x, y) => {\n    const key = getKey(x, y);\n    return map.has(key);\n  };\n}\n\n/**\n * #FFF 4 length hex or #FFFFFF 6 length to rgb\n * @param {*} hex\n */\nfunction hexToRgb(hex) {\n  let red = 0,\n    green = 0,\n    blue = 0;\n  if (hex.length == 4) {\n    red = \"0x\" + hex[1] + hex[1];\n    green = \"0x\" + hex[2] + hex[2];\n    blue = \"0x\" + hex[3] + hex[3];\n  } else if (hex.length == 7) {\n    red = \"0x\" + hex[1] + hex[2];\n    green = \"0x\" + hex[3] + hex[4];\n    blue = \"0x\" + hex[5] + hex[6];\n  }\n  return { r: red, g: green, b: blue };\n}\n\n/**\n * Get the index in a canvasContext.getImageData() array given the x, y, and width\n * @param {*} x\n * @param {*} y\n * @param {*} width\n */\nfunction getIndex(x, y, width) {\n  return (x + y * width) * 4;\n}\nexport { detect, isRed, isBlue, colorAreaWithBounds };\n","// TODO to be implemented / fixed!\n\nconst WIDTH_PADDING = 50;\n\nasync function drawRotated(context, canvas, degrees, image) {\n  if (canvas == null || image == null || context == null) {\n    return;\n  }\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.save();\n  context.translate(canvas.width / 2, canvas.height / 2);\n  context.rotate(degreesToRadians(degrees));\n\n  const width = window.innerWidth - WIDTH_PADDING;\n  const height = (image.height / width) * width;\n  context.drawImage(image, -width / 2, -height / 2);\n  context.restore();\n}\n\nfunction drawAxis(context, canvas, axisCoordinates, image) {\n  if (canvas == null || image == null) {\n    return;\n  }\n  const { x: xOffset, y: yOffset } = axisCoordinates;\n  const { width: canvasWidth, height: canvasHeight } = canvas;\n  const originX = 0;\n  const originY = canvasHeight / 2 + yOffset;\n  context.beginPath();\n  context.moveTo(originX, originY + yOffset);\n  context.lineTo(originX + canvasWidth, originY + yOffset);\n  context.strokeStyle = \"#FF0000\";\n  context.stroke();\n}\n\nfunction degreesToRadians(degrees) {\n  return degrees * 0.01745;\n}\n\nfunction clearCanvasDrawing(context, width, height) {\n  if (context == null) {\n    return;\n  }\n  context.clearRect(0, 0, width, height);\n}\n\nfunction setWithImage(context, width, height, image) {\n  if (context == null) {\n    return;\n  }\n  context.drawImage(image, 0, 0, width, height);\n}\n\nexport { drawRotated, drawAxis, clearCanvasDrawing, setWithImage };\n","import * as Canvas from \"../../utils/Canvas\";\n\nasync function resetCanvas(\n  event,\n  canvasContext,\n  canvasWidth,\n  canvasHeight,\n  image,\n  setNumPixelsColored\n) {\n  event.preventDefault();\n  Canvas.setWithImage(canvasContext, canvasWidth, canvasHeight, image);\n  setNumPixelsColored(0);\n}\n\nexport { resetCanvas };\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport * as innerCanvasInfoReducer from \"../../redux/innerCanvasInfoReducer\";\nimport * as outerCanvasInfoReducer from \"../../redux/outerCanvasInfoReducer\";\nimport * as ImageAnalysis from \"../../utils/ImageAnalysis\";\nimport * as utils from \"./utils\";\n\nfunction CanvasEffectButtonGroup(props) {\n  const dispatch = useDispatch();\n\n  // Redux\n  const image = useSelector((state) => state.image.source);\n  const isOuterEdit = useSelector((state) => state.canvasEdit.isOuterEdit);\n  const outerCanvasInfo = useSelector((state) => state.outerCanvasInfo);\n  const innerCanvasInfo = useSelector((state) => state.innerCanvasInfo);\n  const { width: canvasWidth, height: canvasHeight } = useSelector(\n    (state) => state.canvasSettings.canvasDimensions\n  );\n\n  // Props\n  const { recolorHex } = props;\n  const [detectionThreshold] = props.detectionThreshold;\n\n  // local\n  const currentCanvasInfo = isOuterEdit ? outerCanvasInfo : innerCanvasInfo;\n\n  // TODO move this to utils\n  async function recolorDetection(canvasContext) {\n    const { width: detectionWidth, height: detectionHeight } = image;\n    const detectionDimensions = { detectionWidth, detectionHeight };\n\n    const isColorDetector = isOuterEdit\n      ? ImageAnalysis.isRed(detectionThreshold)\n      : ImageAnalysis.isBlue(detectionThreshold);\n\n    const [recoloredImageData, detectedPixels] = await ImageAnalysis.detect(\n      canvasContext,\n      detectionDimensions,\n      isColorDetector,\n      recolorHex\n    );\n\n    canvasContext.putImageData(\n      recoloredImageData,\n      0,\n      0,\n      0,\n      0,\n      detectionWidth,\n      detectionHeight\n    );\n\n    const setContext = isOuterEdit\n      ? outerCanvasInfoReducer.setContext\n      : innerCanvasInfoReducer.setContext;\n    dispatch(setContext(canvasContext));\n\n    const setDetectedPixels = isOuterEdit\n      ? outerCanvasInfoReducer.setDetectedPixels\n      : innerCanvasInfoReducer.setDetectedPixels;\n    dispatch(setDetectedPixels(detectedPixels));\n  }\n\n  return (\n    <div>\n      <Button\n        variant=\"outline-primary\"\n        className=\"mx-1\"\n        onClick={() => recolorDetection(currentCanvasInfo.context)}\n      >\n        Recolor detected\n      </Button>\n      <Button\n        variant=\"outline-primary\"\n        className=\"mx-1\"\n        onClick={(event) => {\n          const setNumPixelsColored = isOuterEdit\n            ? outerCanvasInfoReducer.setNumColoredPixelsCallback(dispatch)\n            : innerCanvasInfoReducer.setNumColoredPixelsCallback(dispatch);\n\n          const setDetectedPixels = isOuterEdit\n            ? outerCanvasInfoReducer.setDetectedPixels\n            : innerCanvasInfoReducer.setDetectedPixels;\n          dispatch(setDetectedPixels([]));\n\n          utils.resetCanvas(\n            event,\n            currentCanvasInfo.context,\n            canvasWidth,\n            canvasHeight,\n            image,\n            setNumPixelsColored\n          );\n        }}\n      >\n        Reset\n      </Button>\n    </div>\n  );\n}\n\nexport default CanvasEffectButtonGroup;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Form, Button } from \"react-bootstrap\";\nimport * as innerCanvasInfoReducer from \"../../redux/innerCanvasInfoReducer\";\nimport * as outerCanvasInfoReducer from \"../../redux/outerCanvasInfoReducer\";\nimport ColorToggler from \"../ColorToggler/ColorToggler\";\nimport CanvasEffectButtonGroup from \"../CanvasEffectButtonGroup/CanvasEffectButtonGroup\";\nimport \"./index.css\";\n\nfunction ImageAnalyzer(props) {\n  const dispatch = useDispatch();\n  const SLIDER_MIN = 0;\n  const SLIDER_MAX = 255;\n  const [detectionThreshold, setDetectionThreshold] = useState(0);\n\n  const changeDetectionThresholdBy = (value) => {\n    setDetectionThreshold((previous) => {\n      previous = parseInt(previous);\n      let newValue = previous + value;\n      newValue = newValue < 0 ? SLIDER_MIN : newValue;\n      newValue = newValue > SLIDER_MAX ? SLIDER_MAX : newValue;\n      return newValue;\n    });\n  };\n\n  const isOuterEdit = useSelector((state) => state.canvasEdit.isOuterEdit);\n\n  const innerSetRecolorHex = innerCanvasInfoReducer.setRecolorHex;\n  const outerSetRecolorHex = outerCanvasInfoReducer.setRecolorHex;\n  const setRecolorHex = isOuterEdit ? outerSetRecolorHex : innerSetRecolorHex;\n\n  const innerRecolorHex = useSelector(\n    (state) => state.innerCanvasInfo.recolorHex\n  );\n\n  const outerRecolorHex = useSelector(\n    (state) => state.outerCanvasInfo.recolorHex\n  );\n  const recolorHex = isOuterEdit ? outerRecolorHex : innerRecolorHex;\n\n  const canvasColorOptionsProps = {\n    detectionThreshold: [detectionThreshold, setDetectionThreshold],\n    ...props,\n    recolorHex,\n  };\n\n  return (\n    <div>\n      <div>\n        <ColorToggler />\n      </div>\n      <div>\n        <Form.Label>Recolor:</Form.Label>\n        <Form.Control\n          className=\"mx-auto input\"\n          type=\"color\"\n          value={recolorHex}\n          onChange={(event) => {\n            const { value } = event.target;\n            dispatch(setRecolorHex(value));\n          }}\n        />\n      </div>\n      <div>\n        <Form.Label>Sensitivity: {detectionThreshold}</Form.Label>\n        <div className=\"d-flex mx-auto mb-3 justify-content-center\">\n          <Form.Control\n            className=\"input mx-2\"\n            type=\"range\"\n            min={SLIDER_MIN}\n            max={SLIDER_MAX}\n            value={detectionThreshold}\n            onChange={(event) => setDetectionThreshold(event.target.value)}\n          />\n        </div>\n        <div className=\"d-flex mx-auto justify-content-center\">\n          <Button\n            onClick={() => {\n              changeDetectionThresholdBy(-15);\n            }}\n            variant=\"outline-primary\"\n          >\n            -15\n          </Button>\n          <Button\n            className=\"mx-2\"\n            onClick={() => {\n              changeDetectionThresholdBy(-5);\n            }}\n            variant=\"outline-primary\"\n          >\n            -5\n          </Button>\n          <Button\n            className=\"mx-2\"\n            onClick={() => {\n              changeDetectionThresholdBy(-1);\n            }}\n            variant=\"outline-primary\"\n          >\n            -1\n          </Button>\n\n          <Button\n            className=\"mx-2\"\n            onClick={() => {\n              changeDetectionThresholdBy(1);\n            }}\n            variant=\"outline-primary\"\n          >\n            +1\n          </Button>\n\n          <Button\n            className=\"mx-2\"\n            onClick={() => {\n              changeDetectionThresholdBy(5);\n            }}\n            variant=\"outline-primary\"\n          >\n            +5\n          </Button>\n          <Button\n            onClick={() => {\n              changeDetectionThresholdBy(15);\n            }}\n            variant=\"outline-primary\"\n          >\n            +15\n          </Button>\n        </div>\n      </div>\n      <div className=\"m-2\">\n        <CanvasEffectButtonGroup {...canvasColorOptionsProps} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageAnalyzer;\n","import React, { useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"./index.css\";\n\nfunction Canvas(props) {\n  const dispatch = useDispatch();\n  const image = props.image;\n  const { canvasWidth, canvasHeight } = props.canvasDimensions;\n  const { drawWidth, drawHeight } = props.drawDimensions;\n  const [canvasContext, setCanvasContext] = props.canvasContext;\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    const context = canvas.getContext(\"2d\");\n    dispatch(setCanvasContext(context));\n  }, []);\n\n  useEffect(() => {\n    if (image == null || canvasContext == null || canvasRef == null) {\n      return;\n    }\n\n    const { current: canvas } = canvasRef;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvasContext.drawImage(image, 0, 0, drawWidth, drawHeight);\n  }, [image, drawWidth, drawHeight, canvasWidth, canvasHeight, canvasContext]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} className=\"border\" />\n    </div>\n  );\n}\n\nexport default Canvas;\n","export function setImage(source) {\n  return (dispatch) => {\n    const image = new Image();\n    image.onload = () => {\n      dispatch({ type: \"IMAGE_SET\", payload: image });\n    };\n    image.src = source;\n  };\n}\n\nexport function setImageCallback(dispatch) {\n  return (image) => {\n    dispatch({\n      type: \"IMAGE_SET\",\n      payload: image,\n    });\n  };\n}\n\nconst initialState = {\n  source: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"IMAGE_SET\":\n      return {\n        ...state,\n        source: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","export function setContext(context) {\n  return { type: \"SET_COMBINE_CONTEXT\", payload: context };\n}\nexport function setNumColoredInnerPixels(context) {\n  return { type: \"SET_NUM_COLORED_INNER_PIXELS\", payload: context };\n}\nexport function setNumColoredOuterPixels(context) {\n  return { type: \"SET_NUM_COLORED_OUTER_PIXELS\", payload: context };\n}\nconst initialState = {\n  context: null,\n  numColoredOuterPixels: 0,\n  numColoredInnerPixels: 0,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_COMBINE_CONTEXT\":\n      return {\n        ...state,\n        context: action.payload,\n      };\n    case \"SET_NUM_COLORED_INNER_PIXELS\":\n      return {\n        ...state,\n        numColoredInnerPixels: action.payload,\n      };\n    case \"SET_NUM_COLORED_OUTER_PIXELS\":\n      return {\n        ...state,\n        numColoredOuterPixels: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import * as ImageAnalysis from \"../../utils/ImageAnalysis\";\nimport * as combinedCanvasInfoReducer from \"../../redux/combinedCanvasInfoReducer\";\n\nfunction calculatedLossPercent(outerPixels, innerPixels) {\n  let percentage = (100 * (outerPixels - innerPixels)) / outerPixels;\n  return percentage.toFixed(4);\n}\n\nasync function combinedAnalysis(\n  outerCanvasInfo,\n  innerCanvasInfo,\n  combinedCanvasInfo,\n  canvasDimensions,\n  dispatch\n) {\n  const outerDetectedPixels = outerCanvasInfo.detectedPixels;\n  const innerDetectedPixels = innerCanvasInfo.detectedPixels;\n  const leftX = await findLeftCutOff(outerDetectedPixels, innerDetectedPixels);\n  const rightX = await findRightCutOff(\n    outerDetectedPixels,\n    innerDetectedPixels\n  );\n\n  const {\n    imageData,\n    outerNumPixelsColored,\n    innerNumPixelsColored,\n  } = await ImageAnalysis.colorAreaWithBounds(\n    canvasDimensions,\n    outerCanvasInfo,\n    innerCanvasInfo,\n    combinedCanvasInfo,\n    { leftX, rightX }\n  );\n\n  combinedCanvasInfo.context.putImageData(\n    imageData,\n    0,\n    0,\n    0,\n    0,\n    canvasDimensions.width,\n    canvasDimensions.height\n  );\n  dispatch(combinedCanvasInfoReducer.setContext(combinedCanvasInfo.context));\n\n  dispatch(\n    combinedCanvasInfoReducer.setNumColoredInnerPixels(innerNumPixelsColored)\n  );\n  dispatch(\n    combinedCanvasInfoReducer.setNumColoredOuterPixels(outerNumPixelsColored)\n  );\n}\n\nasync function findLeftCutOff(outerDetectedPixels, innerDetectedPixels) {\n  let smallestOuter = Number.MAX_SAFE_INTEGER;\n  for (let coordinate of outerDetectedPixels) {\n    const { x } = coordinate;\n    smallestOuter = Math.min(smallestOuter, x);\n  }\n\n  let smallestInner = Number.MAX_SAFE_INTEGER;\n  for (let coordinate of innerDetectedPixels) {\n    const { x } = coordinate;\n    smallestInner = Math.min(smallestInner, x);\n  }\n\n  return Math.max(smallestOuter, smallestInner);\n}\nasync function findRightCutOff(outerDetectedPixels, innerDetectedPixels) {\n  let largestOuter = 0;\n  for (let coordinate of outerDetectedPixels) {\n    const { x } = coordinate;\n    largestOuter = Math.max(largestOuter, x);\n  }\n\n  let largestInner = 0;\n  for (let coordinate of innerDetectedPixels) {\n    const { x } = coordinate;\n    largestInner = Math.max(largestInner, x);\n  }\n\n  return Math.min(largestOuter, largestInner);\n}\n\nexport { calculatedLossPercent, combinedAnalysis };\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as combinedCanvasInfoReducer from \"../../redux/combinedCanvasInfoReducer\";\nimport Canvas from \"../Canvas/Canvas\";\nimport * as utils from \"./utils\";\n\nfunction AnalysisResults(props) {\n  const dispatch = useDispatch();\n\n  const outerCanvasInfo = useSelector((state) => state.outerCanvasInfo);\n  const innerCanvasInfo = useSelector((state) => state.innerCanvasInfo);\n  const combinedCanvasInfo = useSelector((state) => state.combinedCanvasInfo);\n  const canvasDimensions = useSelector(\n    (state) => state.canvasSettings.canvasDimensions\n  );\n\n  const outerNumColoredPixels = combinedCanvasInfo.numColoredOuterPixels;\n  const innerNumColoredPixels = combinedCanvasInfo.numColoredInnerPixels;\n\n  const canvasProps = {\n    ...props,\n    canvasContext: [\n      combinedCanvasInfo.context,\n      combinedCanvasInfoReducer.setContext,\n    ],\n  };\n\n  return (\n    <div>\n      <Canvas {...canvasProps} />\n      <Button\n        className=\"my-2\"\n        variant=\"outline-primary\"\n        onClick={() => {\n          utils.combinedAnalysis(\n            outerCanvasInfo,\n            innerCanvasInfo,\n            combinedCanvasInfo,\n            canvasDimensions,\n            dispatch\n          );\n        }}\n      >\n        Recolor\n      </Button>\n      <div>\n        <div>Outer pixel count: {outerNumColoredPixels}</div>\n        <div>Inner pixel count: {innerNumColoredPixels}</div>\n        <div>\n          Calculated Loss %:{\" \"}\n          {utils.calculatedLossPercent(\n            outerNumColoredPixels,\n            innerNumColoredPixels\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AnalysisResults;\n","import React, { useRef, useCallback } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { withOrientationChange } from \"react-device-detect\";\nimport ImageAnalyzer from \"../../components/ImageAnalyzer/ImageAnalyzer\";\nimport Canvas from \"../../components/Canvas/Canvas\";\nimport Webcam from \"react-webcam\";\nimport * as imageReducer from \"../../redux/imageReducer\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setContext as setInnerContext } from \"../../redux/innerCanvasInfoReducer\";\nimport { setContext as setOuterContext } from \"../../redux/outerCanvasInfoReducer\";\nimport AnalysisResults from \"../../components/AnalysisResults/AnalysisResults\";\nimport \"./index.css\";\nimport sample from \"../../assets/target-thick.png\";\n\nfunction Manual(props) {\n  // Setup\n  const dispatch = useDispatch();\n\n  // Redux\n  const videoConstraints = useSelector(\n    (state) => state.videoReducer.videoConstraints\n  );\n  const image = useSelector((state) => state.image.source);\n  const innerCanvasContext = useSelector(\n    (state) => state.innerCanvasInfo.context\n  );\n  const outerCanvasContext = useSelector(\n    (state) => state.outerCanvasInfo.context\n  );\n  const canvasDimensions = useSelector(\n    (state) => state.canvasSettings.canvasDimensions\n  );\n\n  // Props\n  const { isPortrait } = props;\n\n  // Ref\n  const webcamRef = useRef(null);\n  const captureContainerRef = useRef(null);\n\n  // Other hooks\n  const capture = useCallback(() => {\n    const screenshot = webcamRef.current.getScreenshot();\n    dispatch(imageReducer.setImage(screenshot));\n  }, [webcamRef]);\n\n  // Children props setup\n  const outerCanvasProps = {\n    image: image,\n    canvasDimensions: {\n      canvasWidth: canvasDimensions.width,\n      canvasHeight: canvasDimensions.height,\n    },\n    drawDimensions: {\n      drawWidth: canvasDimensions.width,\n      drawHeight: canvasDimensions.height,\n    },\n    canvasContext: [outerCanvasContext, setOuterContext],\n  };\n\n  const innerCanvasProps = {\n    ...outerCanvasProps,\n    canvasContext: [innerCanvasContext, setInnerContext],\n  };\n\n  const analysisResultsProps = {\n    ...innerCanvasProps,\n  };\n\n  return (\n    <div className=\"App\">\n      {isPortrait && <h5>Please rotate your device</h5>}\n\n      {!isPortrait && (\n        <div\n          className=\"d-flex justify-content-around align-items-center\"\n          ref={captureContainerRef}\n        >\n          <div style={{ position: \"relative\", float: \"top\" }}>\n            <Webcam\n              audio={false}\n              height={videoConstraints.height}\n              ref={webcamRef}\n              screenshotFormat=\"image/jpeg\"\n              width={videoConstraints.width}\n              videoConstraints={videoConstraints}\n            />\n            <div className=\"overlay\">\n              <img\n                className=\"target\"\n                style={{ height: videoConstraints.height }}\n                src={sample}\n              />\n            </div>\n          </div>\n          <div className=\"my-3\">\n            <Button onClick={() => capture()} variant=\"outline-primary\">\n              Take picture\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <Canvas {...outerCanvasProps} />\n      <Canvas {...innerCanvasProps} />\n      <ImageAnalyzer />\n\n      <div>\n        <AnalysisResults {...analysisResultsProps} />\n      </div>\n    </div>\n  );\n}\n\nexport default withOrientationChange(Manual);\n","import React, { useRef, useCallback } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { withOrientationChange } from \"react-device-detect\";\nimport Webcam from \"react-webcam\";\nimport * as imageReducer from \"../../redux/imageReducer\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AnalysisResults from \"../../components/AnalysisResults/AnalysisResults\";\nimport sample from \"../../assets/target-thick.png\";\n\nfunction Auto(props) {\n  // Setup\n  const dispatch = useDispatch();\n\n  // Redux\n  const videoConstraints = useSelector(\n    (state) => state.videoReducer.videoConstraints\n  );\n  const image = useSelector((state) => state.image.source);\n  const canvasDimensions = useSelector(\n    (state) => state.canvasSettings.canvasDimensions\n  );\n\n  // Props\n  const { isLandscape, isPortrait } = props;\n\n  // Ref\n  const webcamRef = useRef(null);\n  const captureContainerRef = useRef(null);\n\n  // Other hooks\n  const capture = useCallback(() => {\n    const screenshot = webcamRef.current.getScreenshot();\n    dispatch(imageReducer.setImage(screenshot));\n  }, [webcamRef]);\n\n  // Children props setup\n  const analysisResultsProps = {\n    image: image,\n    canvasDimensions: {\n      canvasWidth: canvasDimensions.width,\n      canvasHeight: canvasDimensions.height,\n    },\n    drawDimensions: {\n      drawWidth: canvasDimensions.width,\n      drawHeight: canvasDimensions.height,\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      {isPortrait && <h5>Please rotate your device</h5>}\n\n      {!isPortrait && (\n        <div\n          className=\"d-flex justify-content-around align-items-center\"\n          ref={captureContainerRef}\n        >\n          <div style={{ position: \"relative\", float: \"top\" }}>\n            <Webcam\n              audio={false}\n              height={videoConstraints.height}\n              ref={webcamRef}\n              screenshotFormat=\"image/jpeg\"\n              width={videoConstraints.height}\n              videoConstraints={videoConstraints}\n            />\n            <div className=\"overlay\">\n              <img style={{ height: videoConstraints.height }} src={sample} />\n            </div>\n          </div>\n          <div className=\"my-3\">\n            <Button onClick={() => capture()} variant=\"outline-primary\">\n              Take pictures\n            </Button>\n          </div>\n        </div>\n      )}\n      <div>\n        <AnalysisResults {...analysisResultsProps} />\n      </div>\n    </div>\n  );\n}\n\nexport default withOrientationChange(Auto);\n","import React from \"react\";\nimport Manual from \"../Manual\";\nimport Auto from \"../Auto\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from \"react-router-dom\";\nfunction Home() {\n  return (\n    <>\n      <Router>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <NavLink to=\"/auto\" activeClassName=\"selected\">\n                  Auto\n                </NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/manual\" activeClassName=\"selected\">\n                  Manual\n                </NavLink>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route path=\"/manual\">\n              <Manual />\n            </Route>\n            <Route path=\"/auto\">\n              <Auto />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"../../pages/Home\";\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function setCanvasDimensions(dimensions) {\n  return { type: \"SET_CANVAS_DIMENSIONS\", payload: dimensions };\n}\n\nconst initialState = {\n  canvasDimensions: {\n    width: 450,\n    height: 320,\n  },\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_CANVAS_DIMENSIONS\":\n      return {\n        ...state,\n        source: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  videoConstraints: {\n    width: 450,\n    height: 320,\n    facingMode: { exact: \"environment\" },\n    //facingMode: \"user\",\n    audio: false,\n    imageSmoothing: true,\n    screenshotQuality: 1,\n  },\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport imageReducer from \"./imageReducer\";\nimport canvasEditReducer from \"./canvasEditReducer\";\nimport innerCanvasInfoReducer from \"./innerCanvasInfoReducer\";\nimport outerCanvasInfoReducer from \"./outerCanvasInfoReducer\";\nimport combinedCanvasInfoReducer from \"./combinedCanvasInfoReducer\";\nimport canvasSettingsReducer from \"./canvasSettingsReducer\";\nimport videoReducer from \"./videoReducer\";\n\nconst rootReducer = combineReducers({\n  image: imageReducer,\n  canvasEdit: canvasEditReducer,\n  innerCanvasInfo: innerCanvasInfoReducer,\n  outerCanvasInfo: outerCanvasInfoReducer,\n  combinedCanvasInfo: combinedCanvasInfoReducer,\n  canvasSettings: canvasSettingsReducer,\n  videoReducer: videoReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}