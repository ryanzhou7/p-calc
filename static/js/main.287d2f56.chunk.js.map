{"version":3,"sources":["assets/target/thick-half.png","assets/image-5.jpeg","redux/imageReducer.js","redux/combinedCanvasInfoReducer.js","components/Canvas/Canvas.js","models/coordinate.js","models/canvasData.js","utils/ImageAnalysis.js","components/AutoReanalyze/utils.js","components/AutoReanalyze/AutoReanalyze.js","utils/DomHelper.js","pages/Auto/index.js","pages/Home/index.js","components/App/index.tsx","serviceWorker.js","redux/canvasEditReducer.js","redux/innerCanvasInfoReducer.js","redux/outerCanvasInfoReducer.js","redux/canvasSettingsReducer.js","redux/videoReducer.js","redux/index.js","index.js"],"names":["module","exports","setImageOnload","source","dispatch","image","Image","onload","type","payload","src","initialState","setContext","context","numColoredOuterPixels","numColoredInnerPixels","Canvas","props","useDispatch","canvasDimensions","canvasWidth","canvasHeight","drawDimensions","drawWidth","drawHeight","canvasContext","setCanvasContext","canvasRef","useRef","useEffect","current","getContext","canvas","width","height","drawImage","ref","className","Coordinate","x","y","this","CanvasDataHelper","imageArray","redIndex","getIndex","greenIndex","blueIndex","redValue","greenValue","blueValue","alphaIndex","r","g","b","rgb","rgbPixel","alphaValue","alpha","pixelAtCoordinate","newColor","Number","coor","newR","newG","newB","tintDelta","start","end","convert","require","DeltaE","getDetectedPixels","canvasData","seedCoordinate","edgeCanvas","dimensions","a","detectedPixels","push","queue","visited","Set","add","length","currentCoor","pop","getXYKey","neighbors","getNeighbors","neighborCoor","key","isWithinBoundary","has","isSimiliar","count","origin","suspect","originRgb","suspectRgb","originLab","lab","suspectLab","lab1","L","A","B","lab2","getDeltaE00","neighborsDelta","coordinate","delta","deltaX","deltaY","updateImageData","recolor","leftX","rightX","numDetectedPixels","coloredPixels","i","verticalCoordinate","tint","String","getEdgeCanvasHelper","imageData","getImageData","data_type","jsfeat","U8_t","img_u8","matrix_t","imgproc","grayscale","data","gaussian_blur","canny","data_u32","Uint32Array","buffer","cols","rows","pix","putImageData","fullAnalysis","combinedCanvasInfo","detectionWidth","detectionHeight","edgeContext","findMax","maxCoor","ImageAnalysis","maxDetectedPixels","findNextMax","nextMaxCoor","nextMaxdetectedPixels","topDetectedPixels","bottomDetectedPixels","findCutOff","left","right","topPixelsCount","bottomPixelsCount","Promise","resolve","photoOriginY","middleX","distanceFromOrigin","Math","abs","distanceFromTop","boundary","isTopToBottomSearch","MIN_VALUE","MAX_VALUE","boundaryComparator","max","min","intensity","value","detectedPixels1","detectedPixels2","smallestX1","smallestX2","largestX1","largestX2","AnalysisResults","useSelector","state","outerCanvasInfo","innerCanvasInfo","outerPixels","imageSource","canvasSettings","outerNumColoredPixels","innerNumColoredPixels","webcamRef","canvasProps","combinedCanvasInfoReducer","utils","style","display","Button","variant","onClick","window","scrollTo","offsetTop","fileName","document","createElement","href","download","click","DomHelper","toFixed","withOrientationChange","videoConstraints","videoReducer","isPortrait","captureContainerRef","autoAnalyzeContainerRef","imageReducer","sampleChart","capture","useCallback","screenshot","getScreenshot","autoReanalyzeProps","position","float","audio","screenshotFormat","target","AutoReanalyze","Home","App","Boolean","location","hostname","match","isOuterEdit","recoloredImageData","numColoredPixels","recolorHex","facingMode","exact","imageSmoothing","screenshotQuality","rootReducer","combineReducers","action","canvasEdit","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.287d2f56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thick-half.34a74ea6.png\";","module.exports = __webpack_public_path__ + \"static/media/image-5.787a2096.jpeg\";","export function setImageOnload(source) {\n  return (dispatch) => {\n    const image = new Image();\n    image.onload = () => {\n      dispatch({ type: \"IMAGE_SOURCE_SET\", payload: image });\n    };\n    image.src = source;\n  };\n}\n\nexport function setImage(image) {\n  return {\n    type: \"IMAGE_SET\",\n    payload: image,\n  };\n}\n\nconst initialState = {\n  source: null,\n  image: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"IMAGE_SOURCE_SET\":\n      return {\n        ...state,\n        source: action.payload,\n      };\n    case \"IMAGE_SET\":\n      return {\n        ...state,\n        image: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","export function setContext(context) {\n  return { type: \"SET_COMBINE_CONTEXT\", payload: context };\n}\nexport function setNumColoredInnerPixels(numInnerPixels) {\n  return { type: \"SET_NUM_COLORED_INNER_PIXELS\", payload: numInnerPixels };\n}\nexport function setNumColoredOuterPixels(numOuterPixels) {\n  return { type: \"SET_NUM_COLORED_OUTER_PIXELS\", payload: numOuterPixels };\n}\nconst initialState = {\n  context: null,\n  numColoredOuterPixels: 0,\n  numColoredInnerPixels: 0,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_COMBINE_CONTEXT\":\n      return {\n        ...state,\n        context: action.payload,\n      };\n    case \"SET_NUM_COLORED_INNER_PIXELS\":\n      return {\n        ...state,\n        numColoredInnerPixels: action.payload,\n      };\n    case \"SET_NUM_COLORED_OUTER_PIXELS\":\n      return {\n        ...state,\n        numColoredOuterPixels: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"./index.css\";\n\nfunction Canvas(props) {\n  const dispatch = useDispatch();\n  const image = props.image;\n  const { canvasWidth, canvasHeight } = props.canvasDimensions;\n  const { drawWidth, drawHeight } = props.drawDimensions;\n  const [canvasContext, setCanvasContext] = props.canvasContext;\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const { current: canvas } = canvasRef;\n    const context = canvas.getContext(\"2d\");\n    dispatch(setCanvasContext(context));\n  }, []);\n\n  useEffect(() => {\n    if (image == null || canvasContext == null) {\n      return;\n    }\n\n    const { current: canvas } = canvasRef;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    canvasContext.drawImage(image, 0, 0, drawWidth, drawHeight);\n  }, [image, drawWidth, drawHeight, canvasWidth, canvasHeight]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} className=\"border\" />\n    </div>\n  );\n}\n\nexport default Canvas;\n","export default class Coordinate {\n  constructor({ x, y }) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","/**\n * Offsets access each value in a canvasContext.getImageData()\n */\nconst R_OFFSET = 0;\nconst G_OFFSET = 1;\nconst B_OFFSET = 2;\nconst ALPHA_OFFSET = 3;\n\nexport default class CanvasDataHelper {\n  constructor({ canvasWidth, imageArray }) {\n    this.canvasWidth = canvasWidth;\n    this.imageArray = imageArray;\n  }\n\n  rgbPixel({ x, y }) {\n    const redIndex = getIndex(x, y, this.canvasWidth) + R_OFFSET;\n    const greenIndex = getIndex(x, y, this.canvasWidth) + G_OFFSET;\n    const blueIndex = getIndex(x, y, this.canvasWidth) + B_OFFSET;\n\n    const redValue = this.imageArray[redIndex];\n    const greenValue = this.imageArray[greenIndex];\n    const blueValue = this.imageArray[blueIndex];\n    if (redValue !== 0 && greenValue !== 0 && blueValue !== 0) {\n      const alphaIndex = getIndex(x, y, this.canvasWidth) + ALPHA_OFFSET;\n      const alphaValue = this.imageArray[alphaIndex];\n    }\n    return { r: redValue, g: greenValue, b: blueValue };\n  }\n\n  rgbaPixel({ x, y }) {\n    const rgb = this.rgbPixel({ x, y });\n    const alphaIndex = getIndex(x, y, this.canvasWidth) + ALPHA_OFFSET;\n    const alphaValue = this.imageArray[alphaIndex];\n    rgb.alpha = alphaValue;\n    return rgb;\n  }\n\n  recolor(pixelAtCoordinate, newColor) {\n    const { r, g, b } = newColor;\n    const { x, y } = pixelAtCoordinate;\n\n    const redIndex = getIndex(x, y, this.canvasWidth) + R_OFFSET;\n    const greenIndex = getIndex(x, y, this.canvasWidth) + G_OFFSET;\n    const blueIndex = getIndex(x, y, this.canvasWidth) + B_OFFSET;\n\n    this.imageArray[redIndex] = Number(r);\n    this.imageArray[greenIndex] = Number(g);\n    this.imageArray[blueIndex] = Number(b);\n  }\n\n  rRelative(coor) {\n    const { r, g, b } = this.rgbPixel(coor);\n    return b; //r * 2 - g - b;\n  }\n\n  tint(pixelAtCoordinate, newColor) {\n    const { r: newR, g: newG, b: newB } = newColor;\n\n    const { x, y } = pixelAtCoordinate;\n\n    const redIndex = getIndex(x, y, this.canvasWidth) + R_OFFSET;\n    const greenIndex = getIndex(x, y, this.canvasWidth) + G_OFFSET;\n    const blueIndex = getIndex(x, y, this.canvasWidth) + B_OFFSET;\n\n    const r = this.imageArray[redIndex];\n    const g = this.imageArray[greenIndex];\n    const b = this.imageArray[blueIndex];\n\n    this.imageArray[redIndex] += this.tintDelta(r, newR);\n    this.imageArray[greenIndex] += this.tintDelta(g, newG);\n    this.imageArray[blueIndex] += this.tintDelta(b, newB);\n  }\n\n  tintDelta(start, end) {\n    const tintFactor = 3;\n    return (end - start) / 3;\n  }\n}\n\n/**\n * Get the index in a canvasContext.getImageData() array given the x, y, and width\n * @param {*} x\n * @param {*} y\n * @param {*} width\n */\nfunction getIndex(x, y, width) {\n  return (x + y * width) * 4;\n}\n","import Coordinate from \"../models/coordinate\";\nimport CanvasDataHelper from \"../models/canvasData\";\nimport * as math from \"mathjs\";\n\nconst convert = require(\"color-convert\");\nconst DeltaE = require(\"delta-e\");\n\n/**\n * Offsets access each value in a canvasContext.getImageData()\n */\nconst R_OFFSET = 0;\nconst G_OFFSET = 1;\nconst B_OFFSET = 2;\n\n// Increase to relax restrictions\nconst SEED_THRESHOLD_ADJUST = 70;\nconst IS_SIMILAR_PIXEL_THRESHOLD = 100;\n\nasync function findSeed(canvasData, { detectionWidth, detectionHeight }) {\n  const middleX = detectionWidth / 2;\n  let coor = { x: middleX };\n  let intensity = 0;\n\n  // We use detection height / 2 so we only detect for the upper half of the image\n  for (let y = 0; y < detectionHeight / 2; y++) {\n    const coordinate = { x: middleX, y };\n    const rgbPixel = canvasData.rgbPixel(coordinate);\n\n    const value = rgbPixel.r * 2 - rgbPixel.b - rgbPixel.g;\n    if (value > intensity) {\n      coor.y = y;\n      intensity = value;\n    }\n  }\n\n  return coor;\n}\n\n/*\n * Laplacian\n */\n\nasync function getLaplacianArray(\n  canvasData,\n  { detectionWidth, detectionHeight }\n) {\n  const laplacianArray = [];\n\n  // Calculate requires to look one over\n  for (let y = 1; y < detectionHeight - 1; y++) {\n    const row = [];\n    for (let x = 1; x < detectionWidth - 1; x++) {\n      const coordinate = { x, y };\n      const value = await calcLaplacianValue(canvasData, coordinate);\n      row.push(value);\n    }\n\n    laplacianArray.push(row);\n  }\n\n  return laplacianArray;\n}\n\nasync function calcLaplacianValue(canvasData, coordinate) {\n  const { x, y } = coordinate;\n  const rgbPixel = canvasData.rgbPixel(coordinate);\n\n  let sum = -4 * rgbPixel.r;\n\n  for (let delta of neighborsDelta) {\n    const [deltaX, deltaY] = delta;\n    const neighbor = new Coordinate({ x: deltaX + x, y: deltaY + y });\n    const rgbPixel = canvasData.rgbPixel(neighbor);\n    sum += rgbPixel.r;\n  }\n  return sum;\n}\n\nconst red = { r: 255, g: 0, b: 0 };\nconst green = { r: 0, g: 255, b: 0 };\nconst blue = { r: 0, g: 0, b: 255 };\nasync function getDetectedPixels(\n  canvasData,\n  seedCoordinate,\n  edgeCanvas,\n  dimensions\n) {\n  const { x, y } = seedCoordinate;\n  const detectedPixels = [];\n  detectedPixels.push(seedCoordinate);\n\n  let queue = [];\n  queue.push(seedCoordinate);\n  const visited = new Set();\n  visited.add(seedCoordinate);\n  let count = 0;\n  while (queue.length > 0) {\n    const currentCoor = queue.pop();\n\n    const key = getXYKey(currentCoor.x, currentCoor.y);\n    const neighbors = getNeighbors(currentCoor);\n\n    for (let neighborCoor of neighbors) {\n      const key = getXYKey(neighborCoor.x, neighborCoor.y);\n\n      if (\n        isWithinBoundary(neighborCoor, dimensions) &&\n        !visited.has(key) &&\n        isSimiliar(currentCoor, neighborCoor, canvasData, seedCoordinate)\n      ) {\n        queue.push(neighborCoor);\n        detectedPixels.push(neighborCoor);\n      }\n      visited.add(key);\n    }\n    count++;\n  }\n\n  return detectedPixels;\n}\n\nfunction isSimiliar(origin, suspect, canvasData, seedCoordinate) {\n  //const seedRgb = canvasData.rgbPixel(seedCoordinate);\n  //const seedThreshold = seedRgb.r * 2 - seedRgb.g - seedRgb.b;\n\n  const originRgb = canvasData.rgbPixel(seedCoordinate);\n  const suspectRgb = canvasData.rgbPixel(suspect);\n\n  const originLab = convert.rgb.lab(originRgb.r, originRgb.g, originRgb.b);\n  const suspectLab = convert.rgb.lab(suspectRgb.r, suspectRgb.g, suspectRgb.b);\n\n  const lab1 = { L: originLab[0], A: originLab[1], B: originLab[2] };\n  const lab2 = { L: suspectLab[0], A: suspectLab[1], B: suspectLab[2] };\n\n  return DeltaE.getDeltaE00(lab1, lab2) < 20;\n\n  // is red / is within range check\n  // return (\n  //   // check if this is \"red\"\n  //   suspectRgb.r * 2 - suspectRgb.g - suspectRgb.b + SEED_THRESHOLD_ADJUST >\n  //     seedThreshold &&\n  //   // check if each of these values are not too different from the origin\n  //   Math.abs(originRgb.r - suspectRgb.r) < IS_SIMILAR_PIXEL_THRESHOLD &&\n  //   Math.abs(originRgb.g - suspectRgb.g) < IS_SIMILAR_PIXEL_THRESHOLD &&\n  //   Math.abs(originRgb.b - suspectRgb.b) < IS_SIMILAR_PIXEL_THRESHOLD\n  // );\n}\n\nfunction isWithinBoundary(coor, dimensions) {\n  const { x, y } = coor;\n  return x > 0 && x < dimensions.width && y > 0 && y < dimensions.height;\n}\n\nconst laplacianOperator = [\n  [1, 1, 1],\n  [1, -8, 1],\n  [1, 1, 1],\n];\n\nfunction findMatrixMax(matrix) {\n  let max = Number.MIN_VALUE;\n  for (let r = 0; r < matrix.length; r++) {\n    for (let c = 0; c < matrix[r].length; c++) {\n      max = Math.max(max, matrix[r][c]);\n    }\n  }\n  return max;\n}\n\nfunction isZeroCrossing(matrix) {\n  const upLeft = matrix[0][0];\n  const downRight = matrix[2][2];\n\n  const upMiddle = matrix[0][1];\n  const downMiddle = matrix[2][1];\n\n  const downLeft = matrix[2][0];\n  const upRight = matrix[0][2];\n\n  const middleLeft = matrix[1][0];\n  const middleRight = matrix[1][2];\n\n  const max = findMatrixMax(matrix);\n  return (\n    (isDifferentSign(upLeft, downRight) &&\n      isDifferentAboveThreshold(upLeft, downRight, max)) ||\n    (isDifferentSign(upMiddle, downMiddle) &&\n      isDifferentAboveThreshold(upMiddle, downMiddle, max)) ||\n    (isDifferentSign(downLeft, upRight) &&\n      isDifferentAboveThreshold(downLeft, upRight, max)) ||\n    (isDifferentSign(middleLeft, middleRight) &&\n      isDifferentAboveThreshold(middleLeft, middleRight, max))\n  );\n}\n\nfunction isDifferentSign(value1, value2) {\n  return (value1 < 0 && value2 > 0) || (value1 > 0 && value2 < 0);\n}\n\nfunction isDifferentAboveThreshold(value1, value2, max) {\n  return Math.abs(value1 - value2) > 0.3 * max;\n}\n\nfunction isEdge(coor, canvasData) {\n  const rgbPixel = canvasData.rgbPixel(coor);\n  // if all black then it is a edge pixel\n  return rgbPixel.r === 255 && rgbPixel.g === 255 && rgbPixel.b === 255;\n}\n\nconst neighborsDelta = [\n  [-1, 0],\n  [0, -1],\n  [0, 1],\n  [1, 0],\n];\nfunction getNeighbors(coordinate) {\n  const neighbors = [];\n  const { x, y } = coordinate;\n\n  for (let delta of neighborsDelta) {\n    const [deltaX, deltaY] = delta;\n    neighbors.push(new Coordinate({ x: deltaX + x, y: deltaY + y }));\n  }\n\n  return neighbors;\n}\nasync function colorAreaWithBounds(\n  { width, height },\n  outerCanvasInfo,\n  innerCanvasInfo,\n  combinedCanvasInfo,\n  { leftX, rightX }\n) {\n  const imageData = combinedCanvasInfo.context.getImageData(\n    0,\n    0,\n    width,\n    height\n  );\n\n  const outerNumPixelsColored = await updateImageDataOld(\n    { width, height },\n    imageData,\n    { leftX, rightX },\n    outerCanvasInfo\n  );\n\n  const innerNumPixelsColored = await updateImageDataOld(\n    { width, height },\n    imageData,\n    { leftX, rightX },\n    innerCanvasInfo\n  );\n\n  return Promise.resolve({\n    imageData,\n    outerNumPixelsColored,\n    innerNumPixelsColored,\n  });\n}\n\nasync function updateImageData(\n  canvasData,\n  { leftX, rightX, height },\n  recolor,\n  detectedPixels\n) {\n  let numDetectedPixels = 0;\n  const coloredPixels = new Set();\n  for (let coordinate of detectedPixels) {\n    const { x, y } = coordinate;\n\n    // Go down a vertical line\n    for (let i = y; i < height / 2; i++) {\n      const key = getXYKey(x, i);\n      const verticalCoordinate = { x, y: i };\n\n      // Color this pixel only if it has not been colored before and is within bounds\n      if (!coloredPixels.has(key) && leftX <= x && x <= rightX) {\n        coloredPixels.add(key);\n        //canvasData.recolor(verticalCoordinate, recolor);\n\n        canvasData.tint(verticalCoordinate, recolor);\n        numDetectedPixels++;\n      }\n    }\n  }\n\n  return numDetectedPixels;\n}\n\nasync function updateImageDataOld(\n  { width, height },\n  imageData,\n  { leftX, rightX },\n  canvasInfo\n) {\n  const newColor = hexToRgb(canvasInfo.recolorHex);\n\n  let {\n    numDetectedPixels,\n    existingPixels,\n  } = getBoundedPixelInfo(canvasInfo.detectedPixels, { leftX, rightX });\n\n  const isExistingPixel = containsXYKeyIn(getXYKey, existingPixels);\n\n  for (let [, coordinate] of existingPixels) {\n    if (coordinate != null) {\n      const { x, y } = coordinate;\n\n      for (let i = y; i < height / 2; i++) {\n        if (!isExistingPixel(x, i)) {\n          const redIndex = getIndex(x, i, width) + R_OFFSET;\n          const greenIndex = getIndex(x, i, width) + G_OFFSET;\n          const blueIndex = getIndex(x, i, width) + B_OFFSET;\n          imageData.data[redIndex] = newColor.r;\n          imageData.data[greenIndex] = newColor.g;\n          imageData.data[blueIndex] = newColor.b;\n\n          const currentKey = getXYKey(x, i);\n          existingPixels.set(currentKey, null);\n          numDetectedPixels++;\n        }\n      }\n    }\n  }\n\n  return numDetectedPixels;\n}\n\nfunction getBoundedPixelInfo(detectedPixels, { leftX, rightX }) {\n  const existingPixels = new Map();\n\n  let numDetectedPixels = 0;\n\n  for (let coordinate of detectedPixels) {\n    const { x, y } = coordinate;\n    if (x >= leftX && x <= rightX) {\n      const key = getXYKey(x, y);\n      existingPixels.set(key, coordinate);\n      numDetectedPixels++;\n    }\n  }\n\n  return {\n    numDetectedPixels,\n    existingPixels,\n  };\n}\n\n/**\n * Get the unique key given the arguments\n * @param {*} x\n * @param {*} y\n */\nfunction getXYKey(x, y) {\n  return String(x) + String(y);\n}\n\n/**\n * Given x,y is the generated key in this map?\n * @param {*} x\n * @param {*} y\n * @param {*} map\n */\nfunction containsXYKeyIn(getKey, map) {\n  return (x, y) => {\n    const key = getKey(x, y);\n    return map.has(key);\n  };\n}\n\n/**\n * #FFF 4 length hex or #FFFFFF 6 length to rgb\n * @param {*} hex\n */\nfunction hexToRgb(hex) {\n  let red = 0,\n    green = 0,\n    blue = 0;\n  if (hex.length == 4) {\n    red = \"0x\" + hex[1] + hex[1];\n    green = \"0x\" + hex[2] + hex[2];\n    blue = \"0x\" + hex[3] + hex[3];\n  } else if (hex.length == 7) {\n    red = \"0x\" + hex[1] + hex[2];\n    green = \"0x\" + hex[3] + hex[4];\n    blue = \"0x\" + hex[5] + hex[6];\n  }\n  return { r: red, g: green, b: blue };\n}\n\n/**\n * Get the index in a canvasContext.getImageData() array given the x, y, and width\n * @param {*} x\n * @param {*} y\n * @param {*} width\n */\nfunction getIndex(x, y, width) {\n  return (x + y * width) * 4;\n}\nexport { colorAreaWithBounds, getDetectedPixels, updateImageData, isEdge };\n","import * as ImageAnalysis from \"../../utils/ImageAnalysis\";\nimport * as combinedCanvasInfoReducer from \"../../redux/combinedCanvasInfoReducer\";\nimport CanvasDataHelper from \"../../models/canvasData\";\nimport jsfeat from \"jsfeat\";\n\nasync function getEdgeCanvasHelper(image, context) {\n  const { width, height } = image;\n  context.drawImage(image, 0, 0, width, height);\n  let imageData = context.getImageData(0, 0, width, height);\n\n  const columns = 450,\n    rows = 320,\n    data_type = jsfeat.U8_t;\n  let img_u8 = new jsfeat.matrix_t(columns, rows, data_type);\n  jsfeat.imgproc.grayscale(imageData.data, width, height, img_u8);\n\n  let r = 3; // 0 -4\n  let kernel_size = (r + 1) << 1;\n  let low_threshold = 120; // 1 - 127\n  let high_threshold = 120; // 1 - 127\n\n  jsfeat.imgproc.gaussian_blur(img_u8, img_u8, kernel_size, 0);\n\n  jsfeat.imgproc.canny(img_u8, img_u8, low_threshold, high_threshold);\n\n  // render result back to canvas\n  var data_u32 = new Uint32Array(imageData.data.buffer);\n  var alpha = 0xff << 24;\n  var i = img_u8.cols * img_u8.rows,\n    pix = 0;\n  while (--i >= 0) {\n    pix = img_u8.data[i];\n    data_u32[i] = alpha | (pix << 16) | (pix << 8) | pix;\n  }\n\n  // Draw canny\n  context.putImageData(imageData, 0, 0, 0, 0, width, height);\n\n  const edgeCanvas = new CanvasDataHelper({\n    canvasWidth: width,\n    imageArray: imageData.data,\n  });\n\n  return edgeCanvas;\n}\n\nasync function colorEdges(image, combinedCanvasInfo) {\n  const { width, height } = image;\n  const dimensions = {\n    detectionWidth: width,\n    detectionHeight: height,\n  };\n\n  const { context } = combinedCanvasInfo;\n  context.drawImage(image, 0, 0, width, height);\n  let imageData = context.getImageData(0, 0, width, height);\n\n  const canvasData = new CanvasDataHelper({\n    canvasWidth: dimensions.detectionWidth,\n    imageArray: imageData.data,\n  });\n\n  for (let y = 5; y < height / 2; y++) {\n    for (let x = 5; x < width - 10; x++) {\n      const coor = { x, y };\n      if (ImageAnalysis.isEdge(coor, canvasData)) {\n        canvasData.recolor(coor, { r: 0, g: 255, b: 0 });\n      }\n    }\n  }\n\n  context.putImageData(\n    imageData,\n    0,\n    0,\n    0,\n    0,\n    dimensions.detectionWidth,\n    dimensions.detectionHeight\n  );\n}\n\nasync function fullAnalysis(image, combinedCanvasInfo, canvasRef) {\n  const { width, height } = image;\n  const dimensions = {\n    detectionWidth: width,\n    detectionHeight: height,\n  };\n\n  const { current: canvas } = canvasRef;\n  const edgeContext = canvas.getContext(\"2d\");\n\n  const edgeCanvas = await getEdgeCanvasHelper(image, edgeContext);\n\n  /*\n   * Setup\n   */\n\n  const { context } = combinedCanvasInfo;\n  context.drawImage(image, 0, 0, width, height);\n  let imageData = context.getImageData(0, 0, width, height);\n\n  const canvasData = new CanvasDataHelper({\n    canvasWidth: dimensions.detectionWidth,\n    imageArray: imageData.data,\n  });\n\n  /*\n   * Max / Next Max\n   */\n\n  // Max\n  const maxCoor = await findMax(canvasData, dimensions);\n  const maxDetectedPixels = await ImageAnalysis.getDetectedPixels(\n    canvasData,\n    maxCoor,\n    edgeCanvas,\n    { width, height }\n  );\n\n  // Next max\n  const nextMaxCoor = await findNextMax(\n    maxCoor,\n    maxDetectedPixels,\n    canvasData,\n    width,\n    height\n  );\n  const nextMaxdetectedPixels = await ImageAnalysis.getDetectedPixels(\n    canvasData,\n    nextMaxCoor,\n    edgeCanvas,\n    { width, height }\n  );\n\n  context.putImageData(\n    imageData,\n    0,\n    0,\n    0,\n    0,\n    dimensions.detectionWidth,\n    dimensions.detectionHeight\n  );\n\n  /*\n   * Max / Next Max -> top / bottom\n   */\n\n  // assume that max coor is above next max\n  let topDetectedPixels = maxDetectedPixels;\n  let bottomDetectedPixels = nextMaxdetectedPixels;\n\n  // Means that max coor is not above next max\n  if (maxCoor.y > nextMaxCoor.y) {\n    // Switch them\n    [topDetectedPixels, bottomDetectedPixels] = [\n      bottomDetectedPixels,\n      topDetectedPixels,\n    ];\n  }\n\n  /*\n   * Recolor\n   */\n\n  //  Cutoff finding\n  const { left: leftX, right: rightX } = await findCutOff(\n    topDetectedPixels,\n    bottomDetectedPixels\n  );\n\n  // Recoloring\n  const recolor = { r: 0, g: 255, b: 0 };\n  const topPixelsCount = await ImageAnalysis.updateImageData(\n    canvasData,\n    { leftX, rightX, height },\n    recolor,\n    topDetectedPixels\n  );\n\n  const bottomPixelsCount = await ImageAnalysis.updateImageData(\n    canvasData,\n    { leftX, rightX, height },\n    { r: 0, g: 255, b: 255 },\n    bottomDetectedPixels\n  );\n\n  context.putImageData(\n    imageData,\n    0,\n    0,\n    0,\n    0,\n    dimensions.detectionWidth,\n    dimensions.detectionHeight\n  );\n\n  return Promise.resolve({ topPixelsCount, bottomPixelsCount, context });\n}\n\nasync function findNextMax(maxCoor, detectedPixels, canvasData, width, height) {\n  // Setup\n  const photoOriginY = height / 2;\n  const middleX = width / 2;\n\n  const distanceFromOrigin = Math.abs(maxCoor.y - photoOriginY);\n  const distanceFromTop = maxCoor.y;\n\n  // If the already found coor's distance from the bottom (origin) is less than the tops then\n  // it's closer to the bottom and we are searching from top to bottom\n  const isTopToBottomSearch = distanceFromOrigin < distanceFromTop;\n\n  // If we are search from top to bottom it means the current max is the bottom\n  // Hence, from the detected bottom line when need to find the biggest y as the boundary\n  let boundary = isTopToBottomSearch ? Number.MIN_VALUE : Number.MAX_VALUE;\n  const boundaryComparator = isTopToBottomSearch ? Math.max : Math.min;\n\n  for (let { y } of detectedPixels) {\n    boundary = boundaryComparator(boundary, y);\n  }\n\n  // Ensure that boundary is least some distance from the top / bottom\n  boundary += isTopToBottomSearch ? -20 : 20;\n\n  let coor = { x: middleX };\n  let intensity = 0;\n\n  let y = isTopToBottomSearch ? 0 : photoOriginY;\n\n  while (y !== boundary) {\n    const coordinate = { x: middleX, y };\n    const rgbPixel = canvasData.rgbPixel(coordinate);\n\n    const value = rgbPixel.r * 2 - rgbPixel.b - rgbPixel.g;\n    if (value > intensity) {\n      coor.y = y;\n      intensity = value;\n    }\n    isTopToBottomSearch ? y++ : y--;\n  }\n  return coor;\n}\n\nasync function findMax(canvasData, { detectionWidth, detectionHeight }) {\n  const middleX = detectionWidth / 2;\n  let coor = { x: middleX };\n  let intensity = 0;\n\n  // We use detection height / 2 so we only detect for the upper half of the image\n  for (let y = 0; y < detectionHeight / 2; y++) {\n    const coordinate = { x: middleX, y };\n    const rgbPixel = canvasData.rgbPixel(coordinate);\n\n    const value = rgbPixel.r * 2 - rgbPixel.b - rgbPixel.g;\n    if (value > intensity) {\n      coor.y = y;\n      intensity = value;\n    }\n  }\n\n  return coor;\n}\n\nfunction calculatedLossPercent(outerPixels, innerPixels) {\n  let percentage = (100 * (outerPixels - innerPixels)) / outerPixels;\n  return percentage.toFixed(4);\n}\n\nasync function combinedAnalysis(\n  outerCanvasInfo,\n  innerCanvasInfo,\n  combinedCanvasInfo,\n  canvasDimensions,\n  dispatch\n) {\n  const outerDetectedPixels = outerCanvasInfo.detectedPixels;\n  const innerDetectedPixels = innerCanvasInfo.detectedPixels;\n  const { left: leftX, right: rightX } = await findCutOff(\n    outerDetectedPixels,\n    innerDetectedPixels\n  );\n\n  const {\n    imageData,\n    outerNumPixelsColored,\n    innerNumPixelsColored,\n  } = await ImageAnalysis.colorAreaWithBounds(\n    canvasDimensions,\n    outerCanvasInfo,\n    innerCanvasInfo,\n    combinedCanvasInfo,\n    { leftX, rightX }\n  );\n\n  combinedCanvasInfo.context.putImageData(\n    imageData,\n    0,\n    0,\n    0,\n    0,\n    canvasDimensions.width,\n    canvasDimensions.height\n  );\n  dispatch(combinedCanvasInfoReducer.setContext(combinedCanvasInfo.context));\n\n  dispatch(\n    combinedCanvasInfoReducer.setNumColoredInnerPixels(innerNumPixelsColored)\n  );\n  dispatch(\n    combinedCanvasInfoReducer.setNumColoredOuterPixels(outerNumPixelsColored)\n  );\n}\n\nasync function findCutOff(detectedPixels1, detectedPixels2) {\n  let smallestX1 = Number.MAX_VALUE;\n  let smallestX2 = Number.MAX_VALUE;\n\n  let largestX1 = 0;\n  let largestX2 = 0;\n\n  for (let coordinate of detectedPixels1) {\n    const { x } = coordinate;\n    smallestX1 = Math.min(smallestX1, x);\n    largestX1 = Math.max(largestX1, x);\n  }\n\n  for (let coordinate of detectedPixels2) {\n    const { x } = coordinate;\n    smallestX2 = Math.min(smallestX2, x);\n    largestX2 = Math.max(largestX2, x);\n  }\n\n  return {\n    left: Math.max(smallestX1, smallestX2),\n    right: Math.min(largestX1, largestX2),\n  };\n}\n\nexport {\n  calculatedLossPercent,\n  combinedAnalysis,\n  fullAnalysis,\n  colorEdges,\n  getEdgeCanvasHelper,\n};\n","import React, { useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as combinedCanvasInfoReducer from \"../../redux/combinedCanvasInfoReducer\";\nimport Canvas from \"../Canvas/Canvas\";\nimport * as utils from \"./utils\";\nimport * as DomHelper from \"../../utils/DomHelper\";\n\nfunction AnalysisResults(props) {\n  const dispatch = useDispatch();\n\n  // State\n  const outerCanvasInfo = useSelector((state) => state.outerCanvasInfo);\n  const innerCanvasInfo = useSelector((state) => state.innerCanvasInfo);\n  const combinedCanvasInfo = useSelector((state) => state.combinedCanvasInfo);\n  const canvasDimensions = useSelector(\n    (state) => state.canvasSettings.canvasDimensions\n  );\n  const imageSource = useSelector((state) => state.image.source);\n  const image = useSelector((state) => state.image.image);\n\n  const outerNumColoredPixels = combinedCanvasInfo.numColoredOuterPixels;\n  const innerNumColoredPixels = combinedCanvasInfo.numColoredInnerPixels;\n\n  // Props\n  const { webcamRef } = props;\n\n  // Child props\n  const canvasProps = {\n    ...props,\n    canvasContext: [\n      combinedCanvasInfo.context,\n      combinedCanvasInfoReducer.setContext,\n    ],\n  };\n\n  const canvasRef = useRef(null);\n\n  async function fullAnalysis() {\n    // Draw canny\n    //utils.getEdgeCanvasHelper(imageSource, combinedCanvasInfo.context);\n    await utils.fullAnalysis(imageSource, combinedCanvasInfo, canvasRef);\n    // const {\n    //   topPixelsCount: top,\n    //   bottomPixelsCount: bottom,\n    //   context,\n    // } = await utils.fullAnalysis(imageSource, combinedCanvasInfo, canvasRef);\n    // don't have to do this to update ?\n    // dispatch(combinedCanvasInfoReducer.setContext(context));\n    // dispatch(combinedCanvasInfoReducer.setNumColoredOuterPixels(top));\n    // dispatch(combinedCanvasInfoReducer.setNumColoredInnerPixels(bottom));\n  }\n\n  return (\n    <div>\n      <div className=\"d-flex justify-content-around align-items-center\">\n        <Canvas {...canvasProps} />\n\n        <canvas style={{ display: \"none\" }} ref={canvasRef} />\n\n        <div>\n          <Button\n            className=\"my-1\"\n            variant=\"outline-primary\"\n            onClick={() => {\n              window.scrollTo(0, webcamRef.current.offsetTop);\n            }}\n          >\n            Retake\n          </Button>\n\n          <div>\n            <div className=\"my-4\">\n              <Button\n                onClick={() => {\n                  fullAnalysis();\n                }}\n              >\n                Analyze\n              </Button>\n            </div>\n\n            <Button\n              variant=\"outline-primary\"\n              onClick={() => {\n                DomHelper.downloadJpegInClient(image, \"close\");\n              }}\n            >\n              Download\n            </Button>\n          </div>\n          <div className=\"mt-4\">\n            Loss:{\" \"}\n            {utils.calculatedLossPercent(\n              outerNumColoredPixels,\n              innerNumColoredPixels\n            )}\n            %\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AnalysisResults;\n","/**\n * Return the image with it's source loaded from an file input\n * @param {*} event\n */\nasync function getImageFromInput(event) {\n  return new Promise((resolve, reject) => {\n    if (event.target.files && event.target.files.item(0)) {\n      const imageSource = URL.createObjectURL(event.target.files[0]);\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.src = imageSource;\n      return;\n    }\n    reject(\"No file selected\");\n  });\n}\n\nfunction downloadJpegInClient(imageData, fileName) {\n  const a = document.createElement(\"a\");\n  a.href = imageData;\n  a.download = fileName + \".jpeg\";\n  a.click();\n}\n\nfunction setFromInput(event, setter) {\n  const { value } = event.target;\n  setter(value);\n}\n\nexport { getImageFromInput, setFromInput, downloadJpegInClient };\n","import React, { useRef, useCallback, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { withOrientationChange } from \"react-device-detect\";\nimport Webcam from \"react-webcam\";\nimport * as imageReducer from \"../../redux/imageReducer\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AutoReanalyze from \"../../components/AutoReanalyze/AutoReanalyze\";\nimport target from \"../../assets/target/thick-half.png\";\nimport \"./index.css\";\nimport * as DomHelper from \"../../utils/DomHelper\";\n//import sampleChart from \"../../assets/top-max.jpeg\";\nimport sampleChart from \"../../assets/image-5.jpeg\";\n//import sampleChart from \"../../assets/4.jpeg\";\n\nfunction Auto(props) {\n  // Setup\n  const dispatch = useDispatch();\n\n  // Redux\n  const videoConstraints = useSelector(\n    (state) => state.videoReducer.videoConstraints\n  );\n  const image = useSelector((state) => state.image.source);\n  const canvasDimensions = useSelector(\n    (state) => state.canvasSettings.canvasDimensions\n  );\n\n  // Props\n  const { isPortrait } = props;\n\n  // Ref\n  const webcamRef = useRef(null);\n  const captureContainerRef = useRef(null);\n  const autoAnalyzeContainerRef = useRef(null);\n\n  // UseEffect - Remove this later, just for testing\n  useEffect(() => {\n    dispatch(imageReducer.setImageOnload(sampleChart));\n  }, []);\n\n  // Other hooks\n  const capture = useCallback(() => {\n    const screenshot = webcamRef.current.getScreenshot();\n\n    // Downloads image\n    //DomHelper.downloadJpegInClient(screenshot, \"close\");\n\n    dispatch(imageReducer.setImageOnload(screenshot));\n    dispatch(imageReducer.setImage(screenshot));\n    window.scrollTo(0, autoAnalyzeContainerRef.current.offsetTop);\n  }, [webcamRef]);\n\n  // Children props setup\n  const autoReanalyzeProps = {\n    webcamRef,\n    image: image,\n    canvasDimensions: {\n      canvasWidth: canvasDimensions.width,\n      canvasHeight: canvasDimensions.height,\n    },\n    drawDimensions: {\n      drawWidth: canvasDimensions.width,\n      drawHeight: canvasDimensions.height,\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Ptosis calculator</h2>\n      {isPortrait && <h5>Please rotate your device</h5>}\n\n      {!isPortrait && (\n        <div\n          className=\"d-flex justify-content-around align-items-center\"\n          ref={captureContainerRef}\n        >\n          <div style={{ position: \"relative\", float: \"top\" }}>\n            <Webcam\n              audio={false}\n              height={videoConstraints.height}\n              ref={webcamRef}\n              screenshotFormat=\"image/jpeg\"\n              width={videoConstraints.width}\n              videoConstraints={videoConstraints}\n            />\n            <div className=\"overlay\">\n              <img\n                className=\"target\"\n                style={{ height: videoConstraints.height }}\n                src={target}\n              />\n            </div>\n          </div>\n          <div className=\"my-3\">\n            <Button onClick={() => capture()}>Take picture</Button>\n          </div>\n        </div>\n      )}\n      <div ref={autoAnalyzeContainerRef}>\n        <AutoReanalyze {...autoReanalyzeProps} />\n      </div>\n    </div>\n  );\n}\n\nexport default withOrientationChange(Auto);\n","import React from \"react\";\nimport Auto from \"../Auto\";\nfunction Home() {\n  return (\n    <>\n      <Auto />\n    </>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"../../pages/Home\";\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function toggleIsOuterEdit() {\n  return { type: \"TOGGLE_IS_OUTER_EDIT\" };\n}\n\nconst initialState = {\n  isOuterEdit: true,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"TOGGLE_IS_OUTER_EDIT\":\n      return {\n        ...state,\n        isOuterEdit: !state.isOuterEdit,\n      };\n    default:\n      return state;\n  }\n}\n","export function setContext(context) {\n  return { type: \"SET_INNER_CONTEXT\", payload: context };\n}\nexport function setRecoloredImageData(recoloredImageData) {\n  return {\n    type: \"SET_INNER_RECOLORED_IMAGE_DATA\",\n    payload: recoloredImageData,\n  };\n}\nexport function setDetectedPixels(detectedPixels) {\n  return { type: \"SET_INNER_DETECTED_PIXELS\", payload: detectedPixels };\n}\nexport function setNumColoredPixelsCallback(dispatch) {\n  return (numColoredPixels) => {\n    dispatch(setNumColoredPixels(numColoredPixels));\n  };\n}\n\nexport function setNumColoredPixels(numColoredPixels) {\n  return { type: \"SET_INNER_NUM_COLORED_PIXELS\", payload: numColoredPixels };\n}\n\nexport function setRecolorHex(hex) {\n  return { type: \"SET_INNER_RECOLOR_HEX\", payload: hex };\n}\nconst initialState = {\n  context: null,\n  recoloredImageData: null,\n  numColoredPixels: 0,\n  detectedPixels: [],\n  recolorHex: \"#00FF00\",\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_INNER_CONTEXT\":\n      return {\n        ...state,\n        context: action.payload,\n      };\n    case \"SET_INNER_RECOLORED_IMAGE_DATA\":\n      return {\n        ...state,\n        recoloredImageData: action.payload,\n      };\n    case \"SET_INNER_DETECTED_PIXELS\":\n      return {\n        ...state,\n        detectedPixels: action.payload,\n      };\n    case \"SET_INNER_NUM_COLORED_PIXELS\":\n      return {\n        ...state,\n        numColoredPixels: action.payload,\n      };\n\n    case \"SET_INNER_RECOLOR_HEX\":\n      return {\n        ...state,\n        recolorHex: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","export function setContext(context) {\n  return { type: \"SET_OUTER_CONTEXT\", payload: context };\n}\nexport function setRecoloredImageData(recoloredImageData) {\n  return {\n    type: \"SET_OUTER_RECOLORED_IMAGE_DATA\",\n    payload: recoloredImageData,\n  };\n}\nexport function setDetectedPixels(detectedPixels) {\n  return { type: \"SET_OUTER_DETECTED_PIXELS\", payload: detectedPixels };\n}\nexport function setNumColoredPixelsCallback(dispatch) {\n  return (numColoredPixels) => {\n    dispatch(setNumColoredPixels(numColoredPixels));\n  };\n}\n\nexport function setNumColoredPixels(numColoredPixels) {\n  return { type: \"SET_OUTER_NUM_COLORED_PIXELS\", payload: numColoredPixels };\n}\n\nexport function setRecolorHex(hex) {\n  return { type: \"SET_OUTER_RECOLOR_HEX\", payload: hex };\n}\n\nconst initialState = {\n  context: null,\n  recoloredImageData: null,\n  numColoredPixels: 0,\n  detectedPixels: [],\n  recolorHex: \"#FFA500\",\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_OUTER_CONTEXT\":\n      return {\n        ...state,\n        context: action.payload,\n      };\n    case \"SET_OUTER_RECOLORED_IMAGE_DATA\":\n      return {\n        ...state,\n        recoloredImageData: action.payload,\n      };\n    case \"SET_OUTER_DETECTED_PIXELS\":\n      return {\n        ...state,\n        detectedPixels: action.payload,\n      };\n    case \"SET_OUTER_NUM_COLORED_PIXELS\":\n      return {\n        ...state,\n        numColoredPixels: action.payload,\n      };\n\n    case \"SET_OUTER_RECOLOR_HEX\":\n      return {\n        ...state,\n        recolorHex: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","export function setCanvasDimensions(dimensions) {\n  return { type: \"SET_CANVAS_DIMENSIONS\", payload: dimensions };\n}\n\nconst initialState = {\n  canvasDimensions: {\n    width: 450,\n    height: 320,\n  },\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_CANVAS_DIMENSIONS\":\n      return {\n        ...state,\n        source: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  videoConstraints: {\n    width: 450,\n    height: 320,\n    //width: 560,\n    //height: 280,\n    facingMode: { exact: \"environment\" },\n    //facingMode: \"user\",\n    audio: false,\n    imageSmoothing: true,\n    screenshotQuality: 1,\n  },\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport imageReducer from \"./imageReducer\";\nimport canvasEditReducer from \"./canvasEditReducer\";\nimport innerCanvasInfoReducer from \"./innerCanvasInfoReducer\";\nimport outerCanvasInfoReducer from \"./outerCanvasInfoReducer\";\nimport combinedCanvasInfoReducer from \"./combinedCanvasInfoReducer\";\nimport canvasSettingsReducer from \"./canvasSettingsReducer\";\nimport videoReducer from \"./videoReducer\";\n\nconst rootReducer = combineReducers({\n  image: imageReducer,\n  canvasEdit: canvasEditReducer,\n  innerCanvasInfo: innerCanvasInfoReducer,\n  outerCanvasInfo: outerCanvasInfoReducer,\n  combinedCanvasInfo: combinedCanvasInfoReducer,\n  canvasSettings: canvasSettingsReducer,\n  videoReducer: videoReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}